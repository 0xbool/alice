/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_getamis_alice_crypto_binaryquadraticform_message_pb = require('../../../../../../github.com/getamis/alice/crypto/binaryquadraticform/message_pb.js');
var github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb = require('../../../../../../github.com/getamis/alice/crypto/ecpointgrouplaw/point_pb.js');
goog.exportSymbol('proto.cl.EncryptedMessage', null, global);
goog.exportSymbol('proto.cl.Hash', null, global);
goog.exportSymbol('proto.cl.ProofMessage', null, global);
goog.exportSymbol('proto.cl.PubKeyMessage', null, global);
goog.exportSymbol('proto.cl.VerifyMtaMessage', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cl.PubKeyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cl.PubKeyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cl.PubKeyMessage.displayName = 'proto.cl.PubKeyMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cl.PubKeyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.cl.PubKeyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cl.PubKeyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cl.PubKeyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    p: msg.getP_asB64(),
    a: msg.getA_asB64(),
    q: msg.getQ_asB64(),
    g: (f = msg.getG()) && github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.toObject(includeInstance, f),
    f: (f = msg.getF()) && github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.toObject(includeInstance, f),
    h: (f = msg.getH()) && github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.toObject(includeInstance, f),
    c: msg.getC_asB64(),
    d: jspb.Message.getFieldWithDefault(msg, 8, 0),
    proof: (f = msg.getProof()) && proto.cl.ProofMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cl.PubKeyMessage}
 */
proto.cl.PubKeyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cl.PubKeyMessage;
  return proto.cl.PubKeyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cl.PubKeyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cl.PubKeyMessage}
 */
proto.cl.PubKeyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setP(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setA(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setQ(value);
      break;
    case 4:
      var value = new github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm;
      reader.readMessage(value,github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.deserializeBinaryFromReader);
      msg.setG(value);
      break;
    case 5:
      var value = new github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm;
      reader.readMessage(value,github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.deserializeBinaryFromReader);
      msg.setF(value);
      break;
    case 6:
      var value = new github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm;
      reader.readMessage(value,github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.deserializeBinaryFromReader);
      msg.setH(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setC(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setD(value);
      break;
    case 9:
      var value = new proto.cl.ProofMessage;
      reader.readMessage(value,proto.cl.ProofMessage.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cl.PubKeyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cl.PubKeyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cl.PubKeyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cl.PubKeyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getA_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getQ_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getG();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.serializeBinaryToWriter
    );
  }
  f = message.getF();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.serializeBinaryToWriter
    );
  }
  f = message.getH();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.serializeBinaryToWriter
    );
  }
  f = message.getC_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getD();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.cl.ProofMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes p = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cl.PubKeyMessage.prototype.getP = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes p = 1;
 * This is a type-conversion wrapper around `getP()`
 * @return {string}
 */
proto.cl.PubKeyMessage.prototype.getP_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getP()));
};


/**
 * optional bytes p = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getP()`
 * @return {!Uint8Array}
 */
proto.cl.PubKeyMessage.prototype.getP_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getP()));
};


/** @param {!(string|Uint8Array)} value */
proto.cl.PubKeyMessage.prototype.setP = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes a = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cl.PubKeyMessage.prototype.getA = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes a = 2;
 * This is a type-conversion wrapper around `getA()`
 * @return {string}
 */
proto.cl.PubKeyMessage.prototype.getA_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getA()));
};


/**
 * optional bytes a = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getA()`
 * @return {!Uint8Array}
 */
proto.cl.PubKeyMessage.prototype.getA_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getA()));
};


/** @param {!(string|Uint8Array)} value */
proto.cl.PubKeyMessage.prototype.setA = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes q = 3;
 * @return {!(string|Uint8Array)}
 */
proto.cl.PubKeyMessage.prototype.getQ = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes q = 3;
 * This is a type-conversion wrapper around `getQ()`
 * @return {string}
 */
proto.cl.PubKeyMessage.prototype.getQ_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getQ()));
};


/**
 * optional bytes q = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQ()`
 * @return {!Uint8Array}
 */
proto.cl.PubKeyMessage.prototype.getQ_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getQ()));
};


/** @param {!(string|Uint8Array)} value */
proto.cl.PubKeyMessage.prototype.setQ = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional binaryquadraticform.BQForm g = 4;
 * @return {?proto.binaryquadraticform.BQForm}
 */
proto.cl.PubKeyMessage.prototype.getG = function() {
  return /** @type{?proto.binaryquadraticform.BQForm} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm, 4));
};


/** @param {?proto.binaryquadraticform.BQForm|undefined} value */
proto.cl.PubKeyMessage.prototype.setG = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.cl.PubKeyMessage.prototype.clearG = function() {
  this.setG(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.PubKeyMessage.prototype.hasG = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional binaryquadraticform.BQForm f = 5;
 * @return {?proto.binaryquadraticform.BQForm}
 */
proto.cl.PubKeyMessage.prototype.getF = function() {
  return /** @type{?proto.binaryquadraticform.BQForm} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm, 5));
};


/** @param {?proto.binaryquadraticform.BQForm|undefined} value */
proto.cl.PubKeyMessage.prototype.setF = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.cl.PubKeyMessage.prototype.clearF = function() {
  this.setF(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.PubKeyMessage.prototype.hasF = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional binaryquadraticform.BQForm h = 6;
 * @return {?proto.binaryquadraticform.BQForm}
 */
proto.cl.PubKeyMessage.prototype.getH = function() {
  return /** @type{?proto.binaryquadraticform.BQForm} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm, 6));
};


/** @param {?proto.binaryquadraticform.BQForm|undefined} value */
proto.cl.PubKeyMessage.prototype.setH = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.cl.PubKeyMessage.prototype.clearH = function() {
  this.setH(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.PubKeyMessage.prototype.hasH = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes c = 7;
 * @return {!(string|Uint8Array)}
 */
proto.cl.PubKeyMessage.prototype.getC = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes c = 7;
 * This is a type-conversion wrapper around `getC()`
 * @return {string}
 */
proto.cl.PubKeyMessage.prototype.getC_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getC()));
};


/**
 * optional bytes c = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getC()`
 * @return {!Uint8Array}
 */
proto.cl.PubKeyMessage.prototype.getC_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getC()));
};


/** @param {!(string|Uint8Array)} value */
proto.cl.PubKeyMessage.prototype.setC = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional uint32 d = 8;
 * @return {number}
 */
proto.cl.PubKeyMessage.prototype.getD = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.cl.PubKeyMessage.prototype.setD = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional ProofMessage proof = 9;
 * @return {?proto.cl.ProofMessage}
 */
proto.cl.PubKeyMessage.prototype.getProof = function() {
  return /** @type{?proto.cl.ProofMessage} */ (
    jspb.Message.getWrapperField(this, proto.cl.ProofMessage, 9));
};


/** @param {?proto.cl.ProofMessage|undefined} value */
proto.cl.PubKeyMessage.prototype.setProof = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.cl.PubKeyMessage.prototype.clearProof = function() {
  this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.PubKeyMessage.prototype.hasProof = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cl.EncryptedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cl.EncryptedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cl.EncryptedMessage.displayName = 'proto.cl.EncryptedMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cl.EncryptedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.cl.EncryptedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cl.EncryptedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cl.EncryptedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    m1: (f = msg.getM1()) && github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.toObject(includeInstance, f),
    m2: (f = msg.getM2()) && github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.toObject(includeInstance, f),
    proof: (f = msg.getProof()) && proto.cl.ProofMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cl.EncryptedMessage}
 */
proto.cl.EncryptedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cl.EncryptedMessage;
  return proto.cl.EncryptedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cl.EncryptedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cl.EncryptedMessage}
 */
proto.cl.EncryptedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm;
      reader.readMessage(value,github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.deserializeBinaryFromReader);
      msg.setM1(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm;
      reader.readMessage(value,github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.deserializeBinaryFromReader);
      msg.setM2(value);
      break;
    case 3:
      var value = new proto.cl.ProofMessage;
      reader.readMessage(value,proto.cl.ProofMessage.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cl.EncryptedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cl.EncryptedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cl.EncryptedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cl.EncryptedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getM1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.serializeBinaryToWriter
    );
  }
  f = message.getM2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.serializeBinaryToWriter
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cl.ProofMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional binaryquadraticform.BQForm m1 = 1;
 * @return {?proto.binaryquadraticform.BQForm}
 */
proto.cl.EncryptedMessage.prototype.getM1 = function() {
  return /** @type{?proto.binaryquadraticform.BQForm} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm, 1));
};


/** @param {?proto.binaryquadraticform.BQForm|undefined} value */
proto.cl.EncryptedMessage.prototype.setM1 = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.cl.EncryptedMessage.prototype.clearM1 = function() {
  this.setM1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.EncryptedMessage.prototype.hasM1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional binaryquadraticform.BQForm m2 = 2;
 * @return {?proto.binaryquadraticform.BQForm}
 */
proto.cl.EncryptedMessage.prototype.getM2 = function() {
  return /** @type{?proto.binaryquadraticform.BQForm} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm, 2));
};


/** @param {?proto.binaryquadraticform.BQForm|undefined} value */
proto.cl.EncryptedMessage.prototype.setM2 = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cl.EncryptedMessage.prototype.clearM2 = function() {
  this.setM2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.EncryptedMessage.prototype.hasM2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProofMessage proof = 3;
 * @return {?proto.cl.ProofMessage}
 */
proto.cl.EncryptedMessage.prototype.getProof = function() {
  return /** @type{?proto.cl.ProofMessage} */ (
    jspb.Message.getWrapperField(this, proto.cl.ProofMessage, 3));
};


/** @param {?proto.cl.ProofMessage|undefined} value */
proto.cl.EncryptedMessage.prototype.setProof = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.cl.EncryptedMessage.prototype.clearProof = function() {
  this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.EncryptedMessage.prototype.hasProof = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cl.ProofMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cl.ProofMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cl.ProofMessage.displayName = 'proto.cl.ProofMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cl.ProofMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.cl.ProofMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cl.ProofMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cl.ProofMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    salt: msg.getSalt_asB64(),
    u1: msg.getU1_asB64(),
    u2: msg.getU2_asB64(),
    t1: (f = msg.getT1()) && github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.toObject(includeInstance, f),
    t2: (f = msg.getT2()) && github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cl.ProofMessage}
 */
proto.cl.ProofMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cl.ProofMessage;
  return proto.cl.ProofMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cl.ProofMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cl.ProofMessage}
 */
proto.cl.ProofMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSalt(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setU1(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setU2(value);
      break;
    case 4:
      var value = new github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm;
      reader.readMessage(value,github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.deserializeBinaryFromReader);
      msg.setT1(value);
      break;
    case 5:
      var value = new github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm;
      reader.readMessage(value,github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.deserializeBinaryFromReader);
      msg.setT2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cl.ProofMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cl.ProofMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cl.ProofMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cl.ProofMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getU1_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getU2_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getT1();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.serializeBinaryToWriter
    );
  }
  f = message.getT2();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes salt = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cl.ProofMessage.prototype.getSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes salt = 1;
 * This is a type-conversion wrapper around `getSalt()`
 * @return {string}
 */
proto.cl.ProofMessage.prototype.getSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSalt()));
};


/**
 * optional bytes salt = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSalt()`
 * @return {!Uint8Array}
 */
proto.cl.ProofMessage.prototype.getSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSalt()));
};


/** @param {!(string|Uint8Array)} value */
proto.cl.ProofMessage.prototype.setSalt = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes u1 = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cl.ProofMessage.prototype.getU1 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes u1 = 2;
 * This is a type-conversion wrapper around `getU1()`
 * @return {string}
 */
proto.cl.ProofMessage.prototype.getU1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getU1()));
};


/**
 * optional bytes u1 = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getU1()`
 * @return {!Uint8Array}
 */
proto.cl.ProofMessage.prototype.getU1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getU1()));
};


/** @param {!(string|Uint8Array)} value */
proto.cl.ProofMessage.prototype.setU1 = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes u2 = 3;
 * @return {!(string|Uint8Array)}
 */
proto.cl.ProofMessage.prototype.getU2 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes u2 = 3;
 * This is a type-conversion wrapper around `getU2()`
 * @return {string}
 */
proto.cl.ProofMessage.prototype.getU2_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getU2()));
};


/**
 * optional bytes u2 = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getU2()`
 * @return {!Uint8Array}
 */
proto.cl.ProofMessage.prototype.getU2_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getU2()));
};


/** @param {!(string|Uint8Array)} value */
proto.cl.ProofMessage.prototype.setU2 = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional binaryquadraticform.BQForm t1 = 4;
 * @return {?proto.binaryquadraticform.BQForm}
 */
proto.cl.ProofMessage.prototype.getT1 = function() {
  return /** @type{?proto.binaryquadraticform.BQForm} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm, 4));
};


/** @param {?proto.binaryquadraticform.BQForm|undefined} value */
proto.cl.ProofMessage.prototype.setT1 = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.cl.ProofMessage.prototype.clearT1 = function() {
  this.setT1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.ProofMessage.prototype.hasT1 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional binaryquadraticform.BQForm t2 = 5;
 * @return {?proto.binaryquadraticform.BQForm}
 */
proto.cl.ProofMessage.prototype.getT2 = function() {
  return /** @type{?proto.binaryquadraticform.BQForm} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm, 5));
};


/** @param {?proto.binaryquadraticform.BQForm|undefined} value */
proto.cl.ProofMessage.prototype.setT2 = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.cl.ProofMessage.prototype.clearT2 = function() {
  this.setT2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.ProofMessage.prototype.hasT2 = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cl.VerifyMtaMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cl.VerifyMtaMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cl.VerifyMtaMessage.displayName = 'proto.cl.VerifyMtaMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cl.VerifyMtaMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.cl.VerifyMtaMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cl.VerifyMtaMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cl.VerifyMtaMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    betag: (f = msg.getBetag()) && github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.toObject(includeInstance, f),
    bg: (f = msg.getBg()) && github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cl.VerifyMtaMessage}
 */
proto.cl.VerifyMtaMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cl.VerifyMtaMessage;
  return proto.cl.VerifyMtaMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cl.VerifyMtaMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cl.VerifyMtaMessage}
 */
proto.cl.VerifyMtaMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.deserializeBinaryFromReader);
      msg.setBetag(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.deserializeBinaryFromReader);
      msg.setBg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cl.VerifyMtaMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cl.VerifyMtaMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cl.VerifyMtaMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cl.VerifyMtaMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBetag();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.serializeBinaryToWriter
    );
  }
  f = message.getBg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional ecpointgrouplaw.EcPointMessage betaG = 1;
 * @return {?proto.ecpointgrouplaw.EcPointMessage}
 */
proto.cl.VerifyMtaMessage.prototype.getBetag = function() {
  return /** @type{?proto.ecpointgrouplaw.EcPointMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage, 1));
};


/** @param {?proto.ecpointgrouplaw.EcPointMessage|undefined} value */
proto.cl.VerifyMtaMessage.prototype.setBetag = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.cl.VerifyMtaMessage.prototype.clearBetag = function() {
  this.setBetag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.VerifyMtaMessage.prototype.hasBetag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ecpointgrouplaw.EcPointMessage bG = 2;
 * @return {?proto.ecpointgrouplaw.EcPointMessage}
 */
proto.cl.VerifyMtaMessage.prototype.getBg = function() {
  return /** @type{?proto.ecpointgrouplaw.EcPointMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage, 2));
};


/** @param {?proto.ecpointgrouplaw.EcPointMessage|undefined} value */
proto.cl.VerifyMtaMessage.prototype.setBg = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cl.VerifyMtaMessage.prototype.clearBg = function() {
  this.setBg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.VerifyMtaMessage.prototype.hasBg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cl.Hash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cl.Hash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cl.Hash.displayName = 'proto.cl.Hash';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cl.Hash.prototype.toObject = function(opt_includeInstance) {
  return proto.cl.Hash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cl.Hash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cl.Hash.toObject = function(includeInstance, msg) {
  var f, obj = {
    t1: (f = msg.getT1()) && github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.toObject(includeInstance, f),
    t2: (f = msg.getT2()) && github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.toObject(includeInstance, f),
    g: (f = msg.getG()) && github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.toObject(includeInstance, f),
    f: (f = msg.getF()) && github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.toObject(includeInstance, f),
    h: (f = msg.getH()) && github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.toObject(includeInstance, f),
    p: msg.getP_asB64(),
    q: msg.getQ_asB64(),
    a: msg.getA_asB64(),
    c: msg.getC_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cl.Hash}
 */
proto.cl.Hash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cl.Hash;
  return proto.cl.Hash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cl.Hash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cl.Hash}
 */
proto.cl.Hash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm;
      reader.readMessage(value,github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.deserializeBinaryFromReader);
      msg.setT1(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm;
      reader.readMessage(value,github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.deserializeBinaryFromReader);
      msg.setT2(value);
      break;
    case 3:
      var value = new github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm;
      reader.readMessage(value,github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.deserializeBinaryFromReader);
      msg.setG(value);
      break;
    case 4:
      var value = new github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm;
      reader.readMessage(value,github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.deserializeBinaryFromReader);
      msg.setF(value);
      break;
    case 5:
      var value = new github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm;
      reader.readMessage(value,github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.deserializeBinaryFromReader);
      msg.setH(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setP(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setQ(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setA(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setC(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cl.Hash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cl.Hash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cl.Hash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cl.Hash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getT1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.serializeBinaryToWriter
    );
  }
  f = message.getT2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.serializeBinaryToWriter
    );
  }
  f = message.getG();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.serializeBinaryToWriter
    );
  }
  f = message.getF();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.serializeBinaryToWriter
    );
  }
  f = message.getH();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm.serializeBinaryToWriter
    );
  }
  f = message.getP_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getQ_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getA_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getC_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional binaryquadraticform.BQForm t1 = 1;
 * @return {?proto.binaryquadraticform.BQForm}
 */
proto.cl.Hash.prototype.getT1 = function() {
  return /** @type{?proto.binaryquadraticform.BQForm} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm, 1));
};


/** @param {?proto.binaryquadraticform.BQForm|undefined} value */
proto.cl.Hash.prototype.setT1 = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.cl.Hash.prototype.clearT1 = function() {
  this.setT1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.Hash.prototype.hasT1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional binaryquadraticform.BQForm t2 = 2;
 * @return {?proto.binaryquadraticform.BQForm}
 */
proto.cl.Hash.prototype.getT2 = function() {
  return /** @type{?proto.binaryquadraticform.BQForm} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm, 2));
};


/** @param {?proto.binaryquadraticform.BQForm|undefined} value */
proto.cl.Hash.prototype.setT2 = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cl.Hash.prototype.clearT2 = function() {
  this.setT2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.Hash.prototype.hasT2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional binaryquadraticform.BQForm g = 3;
 * @return {?proto.binaryquadraticform.BQForm}
 */
proto.cl.Hash.prototype.getG = function() {
  return /** @type{?proto.binaryquadraticform.BQForm} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm, 3));
};


/** @param {?proto.binaryquadraticform.BQForm|undefined} value */
proto.cl.Hash.prototype.setG = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.cl.Hash.prototype.clearG = function() {
  this.setG(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.Hash.prototype.hasG = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional binaryquadraticform.BQForm f = 4;
 * @return {?proto.binaryquadraticform.BQForm}
 */
proto.cl.Hash.prototype.getF = function() {
  return /** @type{?proto.binaryquadraticform.BQForm} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm, 4));
};


/** @param {?proto.binaryquadraticform.BQForm|undefined} value */
proto.cl.Hash.prototype.setF = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.cl.Hash.prototype.clearF = function() {
  this.setF(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.Hash.prototype.hasF = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional binaryquadraticform.BQForm h = 5;
 * @return {?proto.binaryquadraticform.BQForm}
 */
proto.cl.Hash.prototype.getH = function() {
  return /** @type{?proto.binaryquadraticform.BQForm} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_binaryquadraticform_message_pb.BQForm, 5));
};


/** @param {?proto.binaryquadraticform.BQForm|undefined} value */
proto.cl.Hash.prototype.setH = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.cl.Hash.prototype.clearH = function() {
  this.setH(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cl.Hash.prototype.hasH = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes p = 6;
 * @return {!(string|Uint8Array)}
 */
proto.cl.Hash.prototype.getP = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes p = 6;
 * This is a type-conversion wrapper around `getP()`
 * @return {string}
 */
proto.cl.Hash.prototype.getP_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getP()));
};


/**
 * optional bytes p = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getP()`
 * @return {!Uint8Array}
 */
proto.cl.Hash.prototype.getP_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getP()));
};


/** @param {!(string|Uint8Array)} value */
proto.cl.Hash.prototype.setP = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes q = 7;
 * @return {!(string|Uint8Array)}
 */
proto.cl.Hash.prototype.getQ = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes q = 7;
 * This is a type-conversion wrapper around `getQ()`
 * @return {string}
 */
proto.cl.Hash.prototype.getQ_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getQ()));
};


/**
 * optional bytes q = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQ()`
 * @return {!Uint8Array}
 */
proto.cl.Hash.prototype.getQ_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getQ()));
};


/** @param {!(string|Uint8Array)} value */
proto.cl.Hash.prototype.setQ = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes a = 8;
 * @return {!(string|Uint8Array)}
 */
proto.cl.Hash.prototype.getA = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes a = 8;
 * This is a type-conversion wrapper around `getA()`
 * @return {string}
 */
proto.cl.Hash.prototype.getA_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getA()));
};


/**
 * optional bytes a = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getA()`
 * @return {!Uint8Array}
 */
proto.cl.Hash.prototype.getA_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getA()));
};


/** @param {!(string|Uint8Array)} value */
proto.cl.Hash.prototype.setA = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes c = 9;
 * @return {!(string|Uint8Array)}
 */
proto.cl.Hash.prototype.getC = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes c = 9;
 * This is a type-conversion wrapper around `getC()`
 * @return {string}
 */
proto.cl.Hash.prototype.getC_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getC()));
};


/**
 * optional bytes c = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getC()`
 * @return {!Uint8Array}
 */
proto.cl.Hash.prototype.getC_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getC()));
};


/** @param {!(string|Uint8Array)} value */
proto.cl.Hash.prototype.setC = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


goog.object.extend(exports, proto.cl);
