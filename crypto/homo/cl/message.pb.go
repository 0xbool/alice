// Copyright Â© 2020 AMIS Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: github.com/getamis/alice/crypto/homo/cl/message.proto

package cl

import (
	binaryquadraticform "github.com/getamis/alice/crypto/binaryquadraticform"
	ecpointgrouplaw "github.com/getamis/alice/crypto/ecpointgrouplaw"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PubKeyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P     []byte                      `protobuf:"bytes,1,opt,name=p,proto3" json:"p,omitempty"`
	A     []byte                      `protobuf:"bytes,2,opt,name=a,proto3" json:"a,omitempty"`
	Q     []byte                      `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	G     *binaryquadraticform.BQForm `protobuf:"bytes,4,opt,name=g,proto3" json:"g,omitempty"`
	F     *binaryquadraticform.BQForm `protobuf:"bytes,5,opt,name=f,proto3" json:"f,omitempty"`
	H     *binaryquadraticform.BQForm `protobuf:"bytes,6,opt,name=h,proto3" json:"h,omitempty"`
	C     []byte                      `protobuf:"bytes,7,opt,name=c,proto3" json:"c,omitempty"`
	D     uint32                      `protobuf:"varint,8,opt,name=d,proto3" json:"d,omitempty"`
	Proof *ProofMessage               `protobuf:"bytes,9,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *PubKeyMessage) Reset() {
	*x = PubKeyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubKeyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubKeyMessage) ProtoMessage() {}

func (x *PubKeyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubKeyMessage.ProtoReflect.Descriptor instead.
func (*PubKeyMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescGZIP(), []int{0}
}

func (x *PubKeyMessage) GetP() []byte {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *PubKeyMessage) GetA() []byte {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *PubKeyMessage) GetQ() []byte {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *PubKeyMessage) GetG() *binaryquadraticform.BQForm {
	if x != nil {
		return x.G
	}
	return nil
}

func (x *PubKeyMessage) GetF() *binaryquadraticform.BQForm {
	if x != nil {
		return x.F
	}
	return nil
}

func (x *PubKeyMessage) GetH() *binaryquadraticform.BQForm {
	if x != nil {
		return x.H
	}
	return nil
}

func (x *PubKeyMessage) GetC() []byte {
	if x != nil {
		return x.C
	}
	return nil
}

func (x *PubKeyMessage) GetD() uint32 {
	if x != nil {
		return x.D
	}
	return 0
}

func (x *PubKeyMessage) GetProof() *ProofMessage {
	if x != nil {
		return x.Proof
	}
	return nil
}

type EncryptedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	M1    *binaryquadraticform.BQForm `protobuf:"bytes,1,opt,name=m1,proto3" json:"m1,omitempty"`
	M2    *binaryquadraticform.BQForm `protobuf:"bytes,2,opt,name=m2,proto3" json:"m2,omitempty"`
	Proof *ProofMessage               `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *EncryptedMessage) Reset() {
	*x = EncryptedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedMessage) ProtoMessage() {}

func (x *EncryptedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedMessage.ProtoReflect.Descriptor instead.
func (*EncryptedMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescGZIP(), []int{1}
}

func (x *EncryptedMessage) GetM1() *binaryquadraticform.BQForm {
	if x != nil {
		return x.M1
	}
	return nil
}

func (x *EncryptedMessage) GetM2() *binaryquadraticform.BQForm {
	if x != nil {
		return x.M2
	}
	return nil
}

func (x *EncryptedMessage) GetProof() *ProofMessage {
	if x != nil {
		return x.Proof
	}
	return nil
}

type ProofMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt []byte                      `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	U1   []byte                      `protobuf:"bytes,2,opt,name=u1,proto3" json:"u1,omitempty"`
	U2   []byte                      `protobuf:"bytes,3,opt,name=u2,proto3" json:"u2,omitempty"`
	T1   *binaryquadraticform.BQForm `protobuf:"bytes,4,opt,name=t1,proto3" json:"t1,omitempty"`
	T2   *binaryquadraticform.BQForm `protobuf:"bytes,5,opt,name=t2,proto3" json:"t2,omitempty"`
}

func (x *ProofMessage) Reset() {
	*x = ProofMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofMessage) ProtoMessage() {}

func (x *ProofMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofMessage.ProtoReflect.Descriptor instead.
func (*ProofMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescGZIP(), []int{2}
}

func (x *ProofMessage) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *ProofMessage) GetU1() []byte {
	if x != nil {
		return x.U1
	}
	return nil
}

func (x *ProofMessage) GetU2() []byte {
	if x != nil {
		return x.U2
	}
	return nil
}

func (x *ProofMessage) GetT1() *binaryquadraticform.BQForm {
	if x != nil {
		return x.T1
	}
	return nil
}

func (x *ProofMessage) GetT2() *binaryquadraticform.BQForm {
	if x != nil {
		return x.T2
	}
	return nil
}

type VerifyMtaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetaG *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,1,opt,name=betaG,proto3" json:"betaG,omitempty"`
	BG    *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,2,opt,name=bG,proto3" json:"bG,omitempty"`
}

func (x *VerifyMtaMessage) Reset() {
	*x = VerifyMtaMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMtaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMtaMessage) ProtoMessage() {}

func (x *VerifyMtaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMtaMessage.ProtoReflect.Descriptor instead.
func (*VerifyMtaMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescGZIP(), []int{3}
}

func (x *VerifyMtaMessage) GetBetaG() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.BetaG
	}
	return nil
}

func (x *VerifyMtaMessage) GetBG() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.BG
	}
	return nil
}

type Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T1 *binaryquadraticform.BQForm `protobuf:"bytes,1,opt,name=t1,proto3" json:"t1,omitempty"`
	T2 *binaryquadraticform.BQForm `protobuf:"bytes,2,opt,name=t2,proto3" json:"t2,omitempty"`
	G  *binaryquadraticform.BQForm `protobuf:"bytes,3,opt,name=g,proto3" json:"g,omitempty"`
	F  *binaryquadraticform.BQForm `protobuf:"bytes,4,opt,name=f,proto3" json:"f,omitempty"`
	H  *binaryquadraticform.BQForm `protobuf:"bytes,5,opt,name=h,proto3" json:"h,omitempty"`
	P  []byte                      `protobuf:"bytes,6,opt,name=p,proto3" json:"p,omitempty"`
	Q  []byte                      `protobuf:"bytes,7,opt,name=q,proto3" json:"q,omitempty"`
	A  []byte                      `protobuf:"bytes,8,opt,name=a,proto3" json:"a,omitempty"`
	C  []byte                      `protobuf:"bytes,9,opt,name=c,proto3" json:"c,omitempty"`
}

func (x *Hash) Reset() {
	*x = Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescGZIP(), []int{4}
}

func (x *Hash) GetT1() *binaryquadraticform.BQForm {
	if x != nil {
		return x.T1
	}
	return nil
}

func (x *Hash) GetT2() *binaryquadraticform.BQForm {
	if x != nil {
		return x.T2
	}
	return nil
}

func (x *Hash) GetG() *binaryquadraticform.BQForm {
	if x != nil {
		return x.G
	}
	return nil
}

func (x *Hash) GetF() *binaryquadraticform.BQForm {
	if x != nil {
		return x.F
	}
	return nil
}

func (x *Hash) GetH() *binaryquadraticform.BQForm {
	if x != nil {
		return x.H
	}
	return nil
}

func (x *Hash) GetP() []byte {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *Hash) GetQ() []byte {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *Hash) GetA() []byte {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *Hash) GetC() []byte {
	if x != nil {
		return x.C
	}
	return nil
}

type HashConsistencyProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T1 *binaryquadraticform.BQForm     `protobuf:"bytes,1,opt,name=t1,proto3" json:"t1,omitempty"`
	T2 *binaryquadraticform.BQForm     `protobuf:"bytes,2,opt,name=t2,proto3" json:"t2,omitempty"`
	G  *binaryquadraticform.BQForm     `protobuf:"bytes,3,opt,name=g,proto3" json:"g,omitempty"`
	F  *binaryquadraticform.BQForm     `protobuf:"bytes,4,opt,name=f,proto3" json:"f,omitempty"`
	H  *binaryquadraticform.BQForm     `protobuf:"bytes,5,opt,name=h,proto3" json:"h,omitempty"`
	P  []byte                          `protobuf:"bytes,6,opt,name=p,proto3" json:"p,omitempty"`
	Q  []byte                          `protobuf:"bytes,7,opt,name=q,proto3" json:"q,omitempty"`
	S  *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,8,opt,name=s,proto3" json:"s,omitempty"`
	R  *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,9,opt,name=r,proto3" json:"r,omitempty"`
	T  *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,10,opt,name=t,proto3" json:"t,omitempty"`
	A  []byte                          `protobuf:"bytes,11,opt,name=a,proto3" json:"a,omitempty"`
	C  []byte                          `protobuf:"bytes,12,opt,name=c,proto3" json:"c,omitempty"`
}

func (x *HashConsistencyProof) Reset() {
	*x = HashConsistencyProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashConsistencyProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashConsistencyProof) ProtoMessage() {}

func (x *HashConsistencyProof) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashConsistencyProof.ProtoReflect.Descriptor instead.
func (*HashConsistencyProof) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescGZIP(), []int{5}
}

func (x *HashConsistencyProof) GetT1() *binaryquadraticform.BQForm {
	if x != nil {
		return x.T1
	}
	return nil
}

func (x *HashConsistencyProof) GetT2() *binaryquadraticform.BQForm {
	if x != nil {
		return x.T2
	}
	return nil
}

func (x *HashConsistencyProof) GetG() *binaryquadraticform.BQForm {
	if x != nil {
		return x.G
	}
	return nil
}

func (x *HashConsistencyProof) GetF() *binaryquadraticform.BQForm {
	if x != nil {
		return x.F
	}
	return nil
}

func (x *HashConsistencyProof) GetH() *binaryquadraticform.BQForm {
	if x != nil {
		return x.H
	}
	return nil
}

func (x *HashConsistencyProof) GetP() []byte {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *HashConsistencyProof) GetQ() []byte {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *HashConsistencyProof) GetS() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *HashConsistencyProof) GetR() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *HashConsistencyProof) GetT() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *HashConsistencyProof) GetA() []byte {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *HashConsistencyProof) GetC() []byte {
	if x != nil {
		return x.C
	}
	return nil
}

type VerifyHashConsistencyProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt []byte                          `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	U1   []byte                          `protobuf:"bytes,2,opt,name=u1,proto3" json:"u1,omitempty"`
	U2   []byte                          `protobuf:"bytes,3,opt,name=u2,proto3" json:"u2,omitempty"`
	T1   *binaryquadraticform.BQForm     `protobuf:"bytes,4,opt,name=t1,proto3" json:"t1,omitempty"`
	T2   *binaryquadraticform.BQForm     `protobuf:"bytes,5,opt,name=t2,proto3" json:"t2,omitempty"`
	S    *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,6,opt,name=s,proto3" json:"s,omitempty"`
	T    *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,7,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *VerifyHashConsistencyProof) Reset() {
	*x = VerifyHashConsistencyProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyHashConsistencyProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyHashConsistencyProof) ProtoMessage() {}

func (x *VerifyHashConsistencyProof) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyHashConsistencyProof.ProtoReflect.Descriptor instead.
func (*VerifyHashConsistencyProof) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescGZIP(), []int{6}
}

func (x *VerifyHashConsistencyProof) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *VerifyHashConsistencyProof) GetU1() []byte {
	if x != nil {
		return x.U1
	}
	return nil
}

func (x *VerifyHashConsistencyProof) GetU2() []byte {
	if x != nil {
		return x.U2
	}
	return nil
}

func (x *VerifyHashConsistencyProof) GetT1() *binaryquadraticform.BQForm {
	if x != nil {
		return x.T1
	}
	return nil
}

func (x *VerifyHashConsistencyProof) GetT2() *binaryquadraticform.BQForm {
	if x != nil {
		return x.T2
	}
	return nil
}

func (x *VerifyHashConsistencyProof) GetS() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *VerifyHashConsistencyProof) GetT() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.T
	}
	return nil
}

type ConsistencyProofMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C1    *binaryquadraticform.BQForm     `protobuf:"bytes,1,opt,name=c1,proto3" json:"c1,omitempty"`
	C2    *binaryquadraticform.BQForm     `protobuf:"bytes,2,opt,name=c2,proto3" json:"c2,omitempty"`
	Proof *VerifyHashConsistencyProof     `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	R     *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,4,opt,name=r,proto3" json:"r,omitempty"`
}

func (x *ConsistencyProofMessage) Reset() {
	*x = ConsistencyProofMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsistencyProofMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsistencyProofMessage) ProtoMessage() {}

func (x *ConsistencyProofMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsistencyProofMessage.ProtoReflect.Descriptor instead.
func (*ConsistencyProofMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescGZIP(), []int{7}
}

func (x *ConsistencyProofMessage) GetC1() *binaryquadraticform.BQForm {
	if x != nil {
		return x.C1
	}
	return nil
}

func (x *ConsistencyProofMessage) GetC2() *binaryquadraticform.BQForm {
	if x != nil {
		return x.C2
	}
	return nil
}

func (x *ConsistencyProofMessage) GetProof() *VerifyHashConsistencyProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *ConsistencyProofMessage) GetR() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.R
	}
	return nil
}

type ClBaseParameterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Q []byte                      `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	G *binaryquadraticform.BQForm `protobuf:"bytes,2,opt,name=g,proto3" json:"g,omitempty"`
}

func (x *ClBaseParameterMessage) Reset() {
	*x = ClBaseParameterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClBaseParameterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClBaseParameterMessage) ProtoMessage() {}

func (x *ClBaseParameterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClBaseParameterMessage.ProtoReflect.Descriptor instead.
func (*ClBaseParameterMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescGZIP(), []int{8}
}

func (x *ClBaseParameterMessage) GetQ() []byte {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *ClBaseParameterMessage) GetG() *binaryquadraticform.BQForm {
	if x != nil {
		return x.G
	}
	return nil
}

var File_github_com_getamis_alice_crypto_homo_cl_message_proto protoreflect.FileDescriptor

var file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDesc = []byte{
	0x0a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x68, 0x6f, 0x6d, 0x6f, 0x2f, 0x63, 0x6c, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x63, 0x6c, 0x1a, 0x41, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f,
	0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d,
	0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f,
	0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x01, 0x0a, 0x0d,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x0a,
	0x01, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x71, 0x12, 0x29, 0x0a, 0x01, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72,
	0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52,
	0x01, 0x67, 0x12, 0x29, 0x0a, 0x01, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x01, 0x66, 0x12, 0x29, 0x0a,
	0x01, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42,
	0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x01, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x01, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x94, 0x01, 0x0a,
	0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x6d, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x02, 0x6d, 0x31, 0x12, 0x2b,
	0x0a, 0x02, 0x6d, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x02, 0x6d, 0x32, 0x12, 0x26, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x75, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x75, 0x32, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x31, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61,
	0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72,
	0x6d, 0x52, 0x02, 0x74, 0x31, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61,
	0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x02,
	0x74, 0x32, 0x22, 0x7a, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x74, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x61, 0x47, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x62, 0x65, 0x74, 0x61, 0x47, 0x12, 0x2f, 0x0a,
	0x02, 0x62, 0x47, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x02, 0x62, 0x47, 0x22, 0x99,
	0x02, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64,
	0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d,
	0x52, 0x02, 0x74, 0x31, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74,
	0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x02, 0x74,
	0x32, 0x12, 0x29, 0x0a, 0x01, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x01, 0x67, 0x12, 0x29, 0x0a, 0x01,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51,
	0x46, 0x6f, 0x72, 0x6d, 0x52, 0x01, 0x66, 0x12, 0x29, 0x0a, 0x01, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72,
	0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52,
	0x01, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x70,
	0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x71, 0x12, 0x0c,
	0x0a, 0x01, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x63, 0x22, 0xb6, 0x03, 0x0a, 0x14, 0x48,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69,
	0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x02, 0x74, 0x31,
	0x12, 0x2b, 0x0a, 0x02, 0x74, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x02, 0x74, 0x32, 0x12, 0x29, 0x0a,
	0x01, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42,
	0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x01, 0x67, 0x12, 0x29, 0x0a, 0x01, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64,
	0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d,
	0x52, 0x01, 0x66, 0x12, 0x29, 0x0a, 0x01, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x01, 0x68, 0x12, 0x0c,
	0x0a, 0x01, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x70, 0x12, 0x0c, 0x0a, 0x01,
	0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x71, 0x12, 0x2d, 0x0a, 0x01, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x73, 0x12, 0x2d, 0x0a, 0x01, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x72, 0x12, 0x2d, 0x0a, 0x01, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x01, 0x63, 0x22, 0x88, 0x02, 0x0a, 0x1a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x75, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x75, 0x32, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x31, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72,
	0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52,
	0x02, 0x74, 0x31, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69,
	0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x02, 0x74, 0x32,
	0x12, 0x2d, 0x0a, 0x01, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x73, 0x12,
	0x2d, 0x0a, 0x01, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x74, 0x22, 0xd8,
	0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x63, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71,
	0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46,
	0x6f, 0x72, 0x6d, 0x52, 0x02, 0x63, 0x31, 0x12, 0x2b, 0x0a, 0x02, 0x63, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64,
	0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d,
	0x52, 0x02, 0x63, 0x32, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2d, 0x0a, 0x01, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x72, 0x22, 0x51, 0x0a, 0x16, 0x43, 0x6c, 0x42,
	0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x71, 0x12, 0x29, 0x0a, 0x01, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x01, 0x67, 0x42, 0x29, 0x5a, 0x27,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d,
	0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f,
	0x68, 0x6f, 0x6d, 0x6f, 0x2f, 0x63, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescOnce sync.Once
	file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescData = file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDesc
)

func file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescGZIP() []byte {
	file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescOnce.Do(func() {
		file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescData)
	})
	return file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDescData
}

var file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_github_com_getamis_alice_crypto_homo_cl_message_proto_goTypes = []interface{}{
	(*PubKeyMessage)(nil),                  // 0: cl.PubKeyMessage
	(*EncryptedMessage)(nil),               // 1: cl.EncryptedMessage
	(*ProofMessage)(nil),                   // 2: cl.ProofMessage
	(*VerifyMtaMessage)(nil),               // 3: cl.VerifyMtaMessage
	(*Hash)(nil),                           // 4: cl.Hash
	(*HashConsistencyProof)(nil),           // 5: cl.HashConsistencyProof
	(*VerifyHashConsistencyProof)(nil),     // 6: cl.VerifyHashConsistencyProof
	(*ConsistencyProofMessage)(nil),        // 7: cl.ConsistencyProofMessage
	(*ClBaseParameterMessage)(nil),         // 8: cl.ClBaseParameterMessage
	(*binaryquadraticform.BQForm)(nil),     // 9: binaryquadraticform.BQForm
	(*ecpointgrouplaw.EcPointMessage)(nil), // 10: ecpointgrouplaw.EcPointMessage
}
var file_github_com_getamis_alice_crypto_homo_cl_message_proto_depIdxs = []int32{
	9,  // 0: cl.PubKeyMessage.g:type_name -> binaryquadraticform.BQForm
	9,  // 1: cl.PubKeyMessage.f:type_name -> binaryquadraticform.BQForm
	9,  // 2: cl.PubKeyMessage.h:type_name -> binaryquadraticform.BQForm
	2,  // 3: cl.PubKeyMessage.proof:type_name -> cl.ProofMessage
	9,  // 4: cl.EncryptedMessage.m1:type_name -> binaryquadraticform.BQForm
	9,  // 5: cl.EncryptedMessage.m2:type_name -> binaryquadraticform.BQForm
	2,  // 6: cl.EncryptedMessage.proof:type_name -> cl.ProofMessage
	9,  // 7: cl.ProofMessage.t1:type_name -> binaryquadraticform.BQForm
	9,  // 8: cl.ProofMessage.t2:type_name -> binaryquadraticform.BQForm
	10, // 9: cl.VerifyMtaMessage.betaG:type_name -> ecpointgrouplaw.EcPointMessage
	10, // 10: cl.VerifyMtaMessage.bG:type_name -> ecpointgrouplaw.EcPointMessage
	9,  // 11: cl.Hash.t1:type_name -> binaryquadraticform.BQForm
	9,  // 12: cl.Hash.t2:type_name -> binaryquadraticform.BQForm
	9,  // 13: cl.Hash.g:type_name -> binaryquadraticform.BQForm
	9,  // 14: cl.Hash.f:type_name -> binaryquadraticform.BQForm
	9,  // 15: cl.Hash.h:type_name -> binaryquadraticform.BQForm
	9,  // 16: cl.HashConsistencyProof.t1:type_name -> binaryquadraticform.BQForm
	9,  // 17: cl.HashConsistencyProof.t2:type_name -> binaryquadraticform.BQForm
	9,  // 18: cl.HashConsistencyProof.g:type_name -> binaryquadraticform.BQForm
	9,  // 19: cl.HashConsistencyProof.f:type_name -> binaryquadraticform.BQForm
	9,  // 20: cl.HashConsistencyProof.h:type_name -> binaryquadraticform.BQForm
	10, // 21: cl.HashConsistencyProof.s:type_name -> ecpointgrouplaw.EcPointMessage
	10, // 22: cl.HashConsistencyProof.r:type_name -> ecpointgrouplaw.EcPointMessage
	10, // 23: cl.HashConsistencyProof.t:type_name -> ecpointgrouplaw.EcPointMessage
	9,  // 24: cl.VerifyHashConsistencyProof.t1:type_name -> binaryquadraticform.BQForm
	9,  // 25: cl.VerifyHashConsistencyProof.t2:type_name -> binaryquadraticform.BQForm
	10, // 26: cl.VerifyHashConsistencyProof.s:type_name -> ecpointgrouplaw.EcPointMessage
	10, // 27: cl.VerifyHashConsistencyProof.t:type_name -> ecpointgrouplaw.EcPointMessage
	9,  // 28: cl.ConsistencyProofMessage.c1:type_name -> binaryquadraticform.BQForm
	9,  // 29: cl.ConsistencyProofMessage.c2:type_name -> binaryquadraticform.BQForm
	6,  // 30: cl.ConsistencyProofMessage.proof:type_name -> cl.VerifyHashConsistencyProof
	10, // 31: cl.ConsistencyProofMessage.r:type_name -> ecpointgrouplaw.EcPointMessage
	9,  // 32: cl.ClBaseParameterMessage.g:type_name -> binaryquadraticform.BQForm
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_github_com_getamis_alice_crypto_homo_cl_message_proto_init() }
func file_github_com_getamis_alice_crypto_homo_cl_message_proto_init() {
	if File_github_com_getamis_alice_crypto_homo_cl_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubKeyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMtaMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashConsistencyProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyHashConsistencyProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsistencyProofMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClBaseParameterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_getamis_alice_crypto_homo_cl_message_proto_goTypes,
		DependencyIndexes: file_github_com_getamis_alice_crypto_homo_cl_message_proto_depIdxs,
		MessageInfos:      file_github_com_getamis_alice_crypto_homo_cl_message_proto_msgTypes,
	}.Build()
	File_github_com_getamis_alice_crypto_homo_cl_message_proto = out.File
	file_github_com_getamis_alice_crypto_homo_cl_message_proto_rawDesc = nil
	file_github_com_getamis_alice_crypto_homo_cl_message_proto_goTypes = nil
	file_github_com_getamis_alice_crypto_homo_cl_message_proto_depIdxs = nil
}
