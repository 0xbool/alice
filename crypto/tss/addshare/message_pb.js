/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb = require('../../../../../../github.com/getamis/alice/crypto/birkhoffinterpolation/bk_pb.js');
var github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb = require('../../../../../../github.com/getamis/alice/crypto/ecpointgrouplaw/point_pb.js');
var github_com_getamis_alice_crypto_zkproof_message_pb = require('../../../../../../github.com/getamis/alice/crypto/zkproof/message_pb.js');
goog.exportSymbol('proto.addshare.BodyCompute', null, global);
goog.exportSymbol('proto.addshare.BodyNewBk', null, global);
goog.exportSymbol('proto.addshare.BodyOldPeer', null, global);
goog.exportSymbol('proto.addshare.BodyResult', null, global);
goog.exportSymbol('proto.addshare.BodyVerify', null, global);
goog.exportSymbol('proto.addshare.Message', null, global);
goog.exportSymbol('proto.addshare.Type', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.addshare.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.addshare.Message.oneofGroups_);
};
goog.inherits(proto.addshare.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.addshare.Message.displayName = 'proto.addshare.Message';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.addshare.Message.oneofGroups_ = [[3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.addshare.Message.BodyCase = {
  BODY_NOT_SET: 0,
  OLD_PEER: 3,
  NEW_BK: 4,
  COMPUTE: 5,
  RESULT: 6,
  VERIFY: 7
};

/**
 * @return {proto.addshare.Message.BodyCase}
 */
proto.addshare.Message.prototype.getBodyCase = function() {
  return /** @type {proto.addshare.Message.BodyCase} */(jspb.Message.computeOneofCase(this, proto.addshare.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.addshare.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.addshare.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.addshare.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.addshare.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    oldPeer: (f = msg.getOldPeer()) && proto.addshare.BodyOldPeer.toObject(includeInstance, f),
    newBk: (f = msg.getNewBk()) && proto.addshare.BodyNewBk.toObject(includeInstance, f),
    compute: (f = msg.getCompute()) && proto.addshare.BodyCompute.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.addshare.BodyResult.toObject(includeInstance, f),
    verify: (f = msg.getVerify()) && proto.addshare.BodyVerify.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.addshare.Message}
 */
proto.addshare.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.addshare.Message;
  return proto.addshare.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.addshare.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.addshare.Message}
 */
proto.addshare.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.addshare.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.addshare.BodyOldPeer;
      reader.readMessage(value,proto.addshare.BodyOldPeer.deserializeBinaryFromReader);
      msg.setOldPeer(value);
      break;
    case 4:
      var value = new proto.addshare.BodyNewBk;
      reader.readMessage(value,proto.addshare.BodyNewBk.deserializeBinaryFromReader);
      msg.setNewBk(value);
      break;
    case 5:
      var value = new proto.addshare.BodyCompute;
      reader.readMessage(value,proto.addshare.BodyCompute.deserializeBinaryFromReader);
      msg.setCompute(value);
      break;
    case 6:
      var value = new proto.addshare.BodyResult;
      reader.readMessage(value,proto.addshare.BodyResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 7:
      var value = new proto.addshare.BodyVerify;
      reader.readMessage(value,proto.addshare.BodyVerify.deserializeBinaryFromReader);
      msg.setVerify(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.addshare.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.addshare.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.addshare.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.addshare.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOldPeer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.addshare.BodyOldPeer.serializeBinaryToWriter
    );
  }
  f = message.getNewBk();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.addshare.BodyNewBk.serializeBinaryToWriter
    );
  }
  f = message.getCompute();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.addshare.BodyCompute.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.addshare.BodyResult.serializeBinaryToWriter
    );
  }
  f = message.getVerify();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.addshare.BodyVerify.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type type = 1;
 * @return {!proto.addshare.Type}
 */
proto.addshare.Message.prototype.getType = function() {
  return /** @type {!proto.addshare.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.addshare.Type} value */
proto.addshare.Message.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.addshare.Message.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.addshare.Message.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional BodyOldPeer old_peer = 3;
 * @return {?proto.addshare.BodyOldPeer}
 */
proto.addshare.Message.prototype.getOldPeer = function() {
  return /** @type{?proto.addshare.BodyOldPeer} */ (
    jspb.Message.getWrapperField(this, proto.addshare.BodyOldPeer, 3));
};


/** @param {?proto.addshare.BodyOldPeer|undefined} value */
proto.addshare.Message.prototype.setOldPeer = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.addshare.Message.oneofGroups_[0], value);
};


proto.addshare.Message.prototype.clearOldPeer = function() {
  this.setOldPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.addshare.Message.prototype.hasOldPeer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BodyNewBk new_bk = 4;
 * @return {?proto.addshare.BodyNewBk}
 */
proto.addshare.Message.prototype.getNewBk = function() {
  return /** @type{?proto.addshare.BodyNewBk} */ (
    jspb.Message.getWrapperField(this, proto.addshare.BodyNewBk, 4));
};


/** @param {?proto.addshare.BodyNewBk|undefined} value */
proto.addshare.Message.prototype.setNewBk = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.addshare.Message.oneofGroups_[0], value);
};


proto.addshare.Message.prototype.clearNewBk = function() {
  this.setNewBk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.addshare.Message.prototype.hasNewBk = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BodyCompute compute = 5;
 * @return {?proto.addshare.BodyCompute}
 */
proto.addshare.Message.prototype.getCompute = function() {
  return /** @type{?proto.addshare.BodyCompute} */ (
    jspb.Message.getWrapperField(this, proto.addshare.BodyCompute, 5));
};


/** @param {?proto.addshare.BodyCompute|undefined} value */
proto.addshare.Message.prototype.setCompute = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.addshare.Message.oneofGroups_[0], value);
};


proto.addshare.Message.prototype.clearCompute = function() {
  this.setCompute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.addshare.Message.prototype.hasCompute = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BodyResult result = 6;
 * @return {?proto.addshare.BodyResult}
 */
proto.addshare.Message.prototype.getResult = function() {
  return /** @type{?proto.addshare.BodyResult} */ (
    jspb.Message.getWrapperField(this, proto.addshare.BodyResult, 6));
};


/** @param {?proto.addshare.BodyResult|undefined} value */
proto.addshare.Message.prototype.setResult = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.addshare.Message.oneofGroups_[0], value);
};


proto.addshare.Message.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.addshare.Message.prototype.hasResult = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional BodyVerify verify = 7;
 * @return {?proto.addshare.BodyVerify}
 */
proto.addshare.Message.prototype.getVerify = function() {
  return /** @type{?proto.addshare.BodyVerify} */ (
    jspb.Message.getWrapperField(this, proto.addshare.BodyVerify, 7));
};


/** @param {?proto.addshare.BodyVerify|undefined} value */
proto.addshare.Message.prototype.setVerify = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.addshare.Message.oneofGroups_[0], value);
};


proto.addshare.Message.prototype.clearVerify = function() {
  this.setVerify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.addshare.Message.prototype.hasVerify = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.addshare.BodyOldPeer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.addshare.BodyOldPeer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.addshare.BodyOldPeer.displayName = 'proto.addshare.BodyOldPeer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.addshare.BodyOldPeer.prototype.toObject = function(opt_includeInstance) {
  return proto.addshare.BodyOldPeer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.addshare.BodyOldPeer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.addshare.BodyOldPeer.toObject = function(includeInstance, msg) {
  var f, obj = {
    bk: (f = msg.getBk()) && github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage.toObject(includeInstance, f),
    sigproofmsg: (f = msg.getSigproofmsg()) && github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.toObject(includeInstance, f),
    pubkey: (f = msg.getPubkey()) && github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.toObject(includeInstance, f),
    threshold: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.addshare.BodyOldPeer}
 */
proto.addshare.BodyOldPeer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.addshare.BodyOldPeer;
  return proto.addshare.BodyOldPeer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.addshare.BodyOldPeer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.addshare.BodyOldPeer}
 */
proto.addshare.BodyOldPeer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage.deserializeBinaryFromReader);
      msg.setBk(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.deserializeBinaryFromReader);
      msg.setSigproofmsg(value);
      break;
    case 3:
      var value = new github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.deserializeBinaryFromReader);
      msg.setPubkey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.addshare.BodyOldPeer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.addshare.BodyOldPeer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.addshare.BodyOldPeer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.addshare.BodyOldPeer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage.serializeBinaryToWriter
    );
  }
  f = message.getSigproofmsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.serializeBinaryToWriter
    );
  }
  f = message.getPubkey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.serializeBinaryToWriter
    );
  }
  f = message.getThreshold();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional birkhoffinterpolation.BkParameterMessage bk = 1;
 * @return {?proto.birkhoffinterpolation.BkParameterMessage}
 */
proto.addshare.BodyOldPeer.prototype.getBk = function() {
  return /** @type{?proto.birkhoffinterpolation.BkParameterMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage, 1));
};


/** @param {?proto.birkhoffinterpolation.BkParameterMessage|undefined} value */
proto.addshare.BodyOldPeer.prototype.setBk = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.addshare.BodyOldPeer.prototype.clearBk = function() {
  this.setBk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.addshare.BodyOldPeer.prototype.hasBk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional zkproof.SchnorrProofMessage siGProofMsg = 2;
 * @return {?proto.zkproof.SchnorrProofMessage}
 */
proto.addshare.BodyOldPeer.prototype.getSigproofmsg = function() {
  return /** @type{?proto.zkproof.SchnorrProofMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage, 2));
};


/** @param {?proto.zkproof.SchnorrProofMessage|undefined} value */
proto.addshare.BodyOldPeer.prototype.setSigproofmsg = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.addshare.BodyOldPeer.prototype.clearSigproofmsg = function() {
  this.setSigproofmsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.addshare.BodyOldPeer.prototype.hasSigproofmsg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ecpointgrouplaw.EcPointMessage pubkey = 3;
 * @return {?proto.ecpointgrouplaw.EcPointMessage}
 */
proto.addshare.BodyOldPeer.prototype.getPubkey = function() {
  return /** @type{?proto.ecpointgrouplaw.EcPointMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage, 3));
};


/** @param {?proto.ecpointgrouplaw.EcPointMessage|undefined} value */
proto.addshare.BodyOldPeer.prototype.setPubkey = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.addshare.BodyOldPeer.prototype.clearPubkey = function() {
  this.setPubkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.addshare.BodyOldPeer.prototype.hasPubkey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 threshold = 4;
 * @return {number}
 */
proto.addshare.BodyOldPeer.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.addshare.BodyOldPeer.prototype.setThreshold = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.addshare.BodyNewBk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.addshare.BodyNewBk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.addshare.BodyNewBk.displayName = 'proto.addshare.BodyNewBk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.addshare.BodyNewBk.prototype.toObject = function(opt_includeInstance) {
  return proto.addshare.BodyNewBk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.addshare.BodyNewBk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.addshare.BodyNewBk.toObject = function(includeInstance, msg) {
  var f, obj = {
    bk: (f = msg.getBk()) && github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.addshare.BodyNewBk}
 */
proto.addshare.BodyNewBk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.addshare.BodyNewBk;
  return proto.addshare.BodyNewBk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.addshare.BodyNewBk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.addshare.BodyNewBk}
 */
proto.addshare.BodyNewBk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage.deserializeBinaryFromReader);
      msg.setBk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.addshare.BodyNewBk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.addshare.BodyNewBk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.addshare.BodyNewBk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.addshare.BodyNewBk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional birkhoffinterpolation.BkParameterMessage bk = 1;
 * @return {?proto.birkhoffinterpolation.BkParameterMessage}
 */
proto.addshare.BodyNewBk.prototype.getBk = function() {
  return /** @type{?proto.birkhoffinterpolation.BkParameterMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage, 1));
};


/** @param {?proto.birkhoffinterpolation.BkParameterMessage|undefined} value */
proto.addshare.BodyNewBk.prototype.setBk = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.addshare.BodyNewBk.prototype.clearBk = function() {
  this.setBk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.addshare.BodyNewBk.prototype.hasBk = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.addshare.BodyCompute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.addshare.BodyCompute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.addshare.BodyCompute.displayName = 'proto.addshare.BodyCompute';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.addshare.BodyCompute.prototype.toObject = function(opt_includeInstance) {
  return proto.addshare.BodyCompute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.addshare.BodyCompute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.addshare.BodyCompute.toObject = function(includeInstance, msg) {
  var f, obj = {
    delta: msg.getDelta_asB64(),
    sigproofmsg: (f = msg.getSigproofmsg()) && github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.addshare.BodyCompute}
 */
proto.addshare.BodyCompute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.addshare.BodyCompute;
  return proto.addshare.BodyCompute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.addshare.BodyCompute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.addshare.BodyCompute}
 */
proto.addshare.BodyCompute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDelta(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.deserializeBinaryFromReader);
      msg.setSigproofmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.addshare.BodyCompute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.addshare.BodyCompute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.addshare.BodyCompute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.addshare.BodyCompute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelta_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSigproofmsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes delta = 1;
 * @return {!(string|Uint8Array)}
 */
proto.addshare.BodyCompute.prototype.getDelta = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes delta = 1;
 * This is a type-conversion wrapper around `getDelta()`
 * @return {string}
 */
proto.addshare.BodyCompute.prototype.getDelta_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDelta()));
};


/**
 * optional bytes delta = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDelta()`
 * @return {!Uint8Array}
 */
proto.addshare.BodyCompute.prototype.getDelta_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDelta()));
};


/** @param {!(string|Uint8Array)} value */
proto.addshare.BodyCompute.prototype.setDelta = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional zkproof.SchnorrProofMessage siGProofMsg = 2;
 * @return {?proto.zkproof.SchnorrProofMessage}
 */
proto.addshare.BodyCompute.prototype.getSigproofmsg = function() {
  return /** @type{?proto.zkproof.SchnorrProofMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage, 2));
};


/** @param {?proto.zkproof.SchnorrProofMessage|undefined} value */
proto.addshare.BodyCompute.prototype.setSigproofmsg = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.addshare.BodyCompute.prototype.clearSigproofmsg = function() {
  this.setSigproofmsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.addshare.BodyCompute.prototype.hasSigproofmsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.addshare.BodyResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.addshare.BodyResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.addshare.BodyResult.displayName = 'proto.addshare.BodyResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.addshare.BodyResult.prototype.toObject = function(opt_includeInstance) {
  return proto.addshare.BodyResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.addshare.BodyResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.addshare.BodyResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    delta: msg.getDelta_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.addshare.BodyResult}
 */
proto.addshare.BodyResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.addshare.BodyResult;
  return proto.addshare.BodyResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.addshare.BodyResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.addshare.BodyResult}
 */
proto.addshare.BodyResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDelta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.addshare.BodyResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.addshare.BodyResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.addshare.BodyResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.addshare.BodyResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelta_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes delta = 1;
 * @return {!(string|Uint8Array)}
 */
proto.addshare.BodyResult.prototype.getDelta = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes delta = 1;
 * This is a type-conversion wrapper around `getDelta()`
 * @return {string}
 */
proto.addshare.BodyResult.prototype.getDelta_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDelta()));
};


/**
 * optional bytes delta = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDelta()`
 * @return {!Uint8Array}
 */
proto.addshare.BodyResult.prototype.getDelta_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDelta()));
};


/** @param {!(string|Uint8Array)} value */
proto.addshare.BodyResult.prototype.setDelta = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.addshare.BodyVerify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.addshare.BodyVerify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.addshare.BodyVerify.displayName = 'proto.addshare.BodyVerify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.addshare.BodyVerify.prototype.toObject = function(opt_includeInstance) {
  return proto.addshare.BodyVerify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.addshare.BodyVerify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.addshare.BodyVerify.toObject = function(includeInstance, msg) {
  var f, obj = {
    sigproofmsg: (f = msg.getSigproofmsg()) && github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.addshare.BodyVerify}
 */
proto.addshare.BodyVerify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.addshare.BodyVerify;
  return proto.addshare.BodyVerify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.addshare.BodyVerify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.addshare.BodyVerify}
 */
proto.addshare.BodyVerify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.deserializeBinaryFromReader);
      msg.setSigproofmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.addshare.BodyVerify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.addshare.BodyVerify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.addshare.BodyVerify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.addshare.BodyVerify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigproofmsg();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional zkproof.SchnorrProofMessage siGProofMsg = 1;
 * @return {?proto.zkproof.SchnorrProofMessage}
 */
proto.addshare.BodyVerify.prototype.getSigproofmsg = function() {
  return /** @type{?proto.zkproof.SchnorrProofMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage, 1));
};


/** @param {?proto.zkproof.SchnorrProofMessage|undefined} value */
proto.addshare.BodyVerify.prototype.setSigproofmsg = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.addshare.BodyVerify.prototype.clearSigproofmsg = function() {
  this.setSigproofmsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.addshare.BodyVerify.prototype.hasSigproofmsg = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.addshare.Type = {
  OLDPEER: 0,
  NEWBK: 1,
  COMPUTE: 2,
  RESULT: 3,
  VERIFY: 4
};

goog.object.extend(exports, proto.addshare);
