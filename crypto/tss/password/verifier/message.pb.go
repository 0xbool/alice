// Copyright Â© 2021 AMIS Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: github.com/getamis/alice/crypto/tss/password/verifier/message.proto

package verifier

import (
	oprf "github.com/getamis/alice/crypto/oprf"
	zkproof "github.com/getamis/alice/crypto/zkproof"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_MsgUser0   Type = 0
	Type_MsgUser1   Type = 1
	Type_MsgServer0 Type = 100
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:   "MsgUser0",
		1:   "MsgUser1",
		100: "MsgServer0",
	}
	Type_value = map[string]int32{
		"MsgUser0":   0,
		"MsgUser1":   1,
		"MsgServer0": 100,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDescGZIP(), []int{0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Type   `protobuf:"varint,1,opt,name=type,proto3,enum=verifier.Type" json:"type,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Body:
	//	*Message_User0
	//	*Message_User1
	//	*Message_Server0
	Body isMessage_Body `protobuf_oneof:"body"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_MsgUser0
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Message) GetBody() isMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Message) GetUser0() *BodyUser0 {
	if x, ok := x.GetBody().(*Message_User0); ok {
		return x.User0
	}
	return nil
}

func (x *Message) GetUser1() *BodyUser1 {
	if x, ok := x.GetBody().(*Message_User1); ok {
		return x.User1
	}
	return nil
}

func (x *Message) GetServer0() *BodyServer0 {
	if x, ok := x.GetBody().(*Message_Server0); ok {
		return x.Server0
	}
	return nil
}

type isMessage_Body interface {
	isMessage_Body()
}

type Message_User0 struct {
	User0 *BodyUser0 `protobuf:"bytes,3,opt,name=user0,proto3,oneof"`
}

type Message_User1 struct {
	User1 *BodyUser1 `protobuf:"bytes,4,opt,name=user1,proto3,oneof"`
}

type Message_Server0 struct {
	Server0 *BodyServer0 `protobuf:"bytes,10,opt,name=server0,proto3,oneof"`
}

func (*Message_User0) isMessage_Body() {}

func (*Message_User1) isMessage_Body() {}

func (*Message_Server0) isMessage_Body() {}

type BodyUser0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPasswordRequest *oprf.OprfRequestMessage `protobuf:"bytes,1,opt,name=oldPasswordRequest,proto3" json:"oldPasswordRequest,omitempty"`
}

func (x *BodyUser0) Reset() {
	*x = BodyUser0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyUser0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyUser0) ProtoMessage() {}

func (x *BodyUser0) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyUser0.ProtoReflect.Descriptor instead.
func (*BodyUser0) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDescGZIP(), []int{1}
}

func (x *BodyUser0) GetOldPasswordRequest() *oprf.OprfRequestMessage {
	if x != nil {
		return x.OldPasswordRequest
	}
	return nil
}

type BodyUser1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldShareGProver1 *zkproof.InteractiveSchnorrProver1 `protobuf:"bytes,1,opt,name=oldShareGProver1,proto3" json:"oldShareGProver1,omitempty"`
}

func (x *BodyUser1) Reset() {
	*x = BodyUser1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyUser1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyUser1) ProtoMessage() {}

func (x *BodyUser1) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyUser1.ProtoReflect.Descriptor instead.
func (*BodyUser1) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDescGZIP(), []int{2}
}

func (x *BodyUser1) GetOldShareGProver1() *zkproof.InteractiveSchnorrProver1 {
	if x != nil {
		return x.OldShareGProver1
	}
	return nil
}

type BodyServer0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPasswordResponse *oprf.OprfResponseMessage          `protobuf:"bytes,1,opt,name=oldPasswordResponse,proto3" json:"oldPasswordResponse,omitempty"`
	ServerGProver1      *zkproof.InteractiveSchnorrProver1 `protobuf:"bytes,3,opt,name=serverGProver1,proto3" json:"serverGProver1,omitempty"`
}

func (x *BodyServer0) Reset() {
	*x = BodyServer0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyServer0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyServer0) ProtoMessage() {}

func (x *BodyServer0) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyServer0.ProtoReflect.Descriptor instead.
func (*BodyServer0) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDescGZIP(), []int{3}
}

func (x *BodyServer0) GetOldPasswordResponse() *oprf.OprfResponseMessage {
	if x != nil {
		return x.OldPasswordResponse
	}
	return nil
}

func (x *BodyServer0) GetServerGProver1() *zkproof.InteractiveSchnorrProver1 {
	if x != nil {
		return x.ServerGProver1
	}
	return nil
}

var File_github_com_getamis_alice_crypto_tss_password_verifier_message_proto protoreflect.FileDescriptor

var file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDesc = []byte{
	0x0a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x74, 0x73, 0x73, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a,
	0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61,
	0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2f, 0x6f, 0x70, 0x72, 0x66, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2f, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x01, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x55, 0x73, 0x65, 0x72, 0x30, 0x48, 0x00,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x30, 0x12, 0x2b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x31,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x55, 0x73, 0x65, 0x72, 0x31, 0x48, 0x00, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x31, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x30, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x30, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x30, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22,
	0x55, 0x0a, 0x09, 0x42, 0x6f, 0x64, 0x79, 0x55, 0x73, 0x65, 0x72, 0x30, 0x12, 0x48, 0x0a, 0x12,
	0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x72, 0x66, 0x2e,
	0x4f, 0x70, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x12, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x09, 0x42, 0x6f, 0x64, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x31, 0x12, 0x4e, 0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x47,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x31, 0x52, 0x10, 0x6f, 0x6c, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x47, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x31, 0x22, 0xa6, 0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x30, 0x12, 0x4b, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6f, 0x70, 0x72, 0x66, 0x2e, 0x4f, 0x70, 0x72, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x6f, 0x6c, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x6b, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63,
	0x68, 0x6e, 0x6f, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x31, 0x52, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x31, 0x2a, 0x32, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x55, 0x73, 0x65, 0x72, 0x30,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x55, 0x73, 0x65, 0x72, 0x31, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x30, 0x10, 0x64,
	0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2f, 0x74, 0x73, 0x73, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDescOnce sync.Once
	file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDescData = file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDesc
)

func file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDescGZIP() []byte {
	file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDescOnce.Do(func() {
		file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDescData)
	})
	return file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDescData
}

var file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_goTypes = []interface{}{
	(Type)(0),                                 // 0: verifier.Type
	(*Message)(nil),                           // 1: verifier.Message
	(*BodyUser0)(nil),                         // 2: verifier.BodyUser0
	(*BodyUser1)(nil),                         // 3: verifier.BodyUser1
	(*BodyServer0)(nil),                       // 4: verifier.BodyServer0
	(*oprf.OprfRequestMessage)(nil),           // 5: oprf.OprfRequestMessage
	(*zkproof.InteractiveSchnorrProver1)(nil), // 6: zkproof.InteractiveSchnorrProver1
	(*oprf.OprfResponseMessage)(nil),          // 7: oprf.OprfResponseMessage
}
var file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_depIdxs = []int32{
	0, // 0: verifier.Message.type:type_name -> verifier.Type
	2, // 1: verifier.Message.user0:type_name -> verifier.BodyUser0
	3, // 2: verifier.Message.user1:type_name -> verifier.BodyUser1
	4, // 3: verifier.Message.server0:type_name -> verifier.BodyServer0
	5, // 4: verifier.BodyUser0.oldPasswordRequest:type_name -> oprf.OprfRequestMessage
	6, // 5: verifier.BodyUser1.oldShareGProver1:type_name -> zkproof.InteractiveSchnorrProver1
	7, // 6: verifier.BodyServer0.oldPasswordResponse:type_name -> oprf.OprfResponseMessage
	6, // 7: verifier.BodyServer0.serverGProver1:type_name -> zkproof.InteractiveSchnorrProver1
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_init() }
func file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_init() {
	if File_github_com_getamis_alice_crypto_tss_password_verifier_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyUser0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyUser1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyServer0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Message_User0)(nil),
		(*Message_User1)(nil),
		(*Message_Server0)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_goTypes,
		DependencyIndexes: file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_depIdxs,
		EnumInfos:         file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_enumTypes,
		MessageInfos:      file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_msgTypes,
	}.Build()
	File_github_com_getamis_alice_crypto_tss_password_verifier_message_proto = out.File
	file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_rawDesc = nil
	file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_goTypes = nil
	file_github_com_getamis_alice_crypto_tss_password_verifier_message_proto_depIdxs = nil
}
