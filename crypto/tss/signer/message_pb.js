/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_getamis_alice_crypto_commitment_message_pb = require('../../../../../../github.com/getamis/alice/crypto/commitment/message_pb.js');
var github_com_getamis_alice_crypto_zkproof_message_pb = require('../../../../../../github.com/getamis/alice/crypto/zkproof/message_pb.js');
var github_com_getamis_alice_crypto_oprf_message_pb = require('../../../../../../github.com/getamis/alice/crypto/oprf/message_pb.js');
goog.exportSymbol('proto.signer.BodyCommitUiTi', null, global);
goog.exportSymbol('proto.signer.BodyCommitViAi', null, global);
goog.exportSymbol('proto.signer.BodyDecommitUiTi', null, global);
goog.exportSymbol('proto.signer.BodyDecommitViAi', null, global);
goog.exportSymbol('proto.signer.BodyDelta', null, global);
goog.exportSymbol('proto.signer.BodyEncK', null, global);
goog.exportSymbol('proto.signer.BodyMta', null, global);
goog.exportSymbol('proto.signer.BodyProofAi', null, global);
goog.exportSymbol('proto.signer.BodyPublicKey', null, global);
goog.exportSymbol('proto.signer.BodySi', null, global);
goog.exportSymbol('proto.signer.Message', null, global);
goog.exportSymbol('proto.signer.Type', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signer.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.signer.Message.oneofGroups_);
};
goog.inherits(proto.signer.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.signer.Message.displayName = 'proto.signer.Message';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.signer.Message.oneofGroups_ = [[3,4,5,6,7,8,9,10,11,12,13,14]];

/**
 * @enum {number}
 */
proto.signer.Message.BodyCase = {
  BODY_NOT_SET: 0,
  PUBKEY: 3,
  ENCK: 4,
  MTA: 5,
  DELTA: 6,
  PROOFAI: 7,
  COMMITVIAI: 8,
  DECOMMITVIAI: 9,
  COMMITUITI: 10,
  DECOMMITUITI: 11,
  SI: 12,
  OPRFREQUEST: 13,
  OPRFRESPONSE: 14
};

/**
 * @return {proto.signer.Message.BodyCase}
 */
proto.signer.Message.prototype.getBodyCase = function() {
  return /** @type {proto.signer.Message.BodyCase} */(jspb.Message.computeOneofCase(this, proto.signer.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signer.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.signer.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signer.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pubkey: (f = msg.getPubkey()) && proto.signer.BodyPublicKey.toObject(includeInstance, f),
    enck: (f = msg.getEnck()) && proto.signer.BodyEncK.toObject(includeInstance, f),
    mta: (f = msg.getMta()) && proto.signer.BodyMta.toObject(includeInstance, f),
    delta: (f = msg.getDelta()) && proto.signer.BodyDelta.toObject(includeInstance, f),
    proofai: (f = msg.getProofai()) && proto.signer.BodyProofAi.toObject(includeInstance, f),
    commitviai: (f = msg.getCommitviai()) && proto.signer.BodyCommitViAi.toObject(includeInstance, f),
    decommitviai: (f = msg.getDecommitviai()) && proto.signer.BodyDecommitViAi.toObject(includeInstance, f),
    commituiti: (f = msg.getCommituiti()) && proto.signer.BodyCommitUiTi.toObject(includeInstance, f),
    decommituiti: (f = msg.getDecommituiti()) && proto.signer.BodyDecommitUiTi.toObject(includeInstance, f),
    si: (f = msg.getSi()) && proto.signer.BodySi.toObject(includeInstance, f),
    oprfrequest: (f = msg.getOprfrequest()) && github_com_getamis_alice_crypto_oprf_message_pb.OprfRequestMessage.toObject(includeInstance, f),
    oprfresponse: (f = msg.getOprfresponse()) && github_com_getamis_alice_crypto_oprf_message_pb.OprfResponseMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signer.Message}
 */
proto.signer.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signer.Message;
  return proto.signer.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signer.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signer.Message}
 */
proto.signer.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.signer.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.signer.BodyPublicKey;
      reader.readMessage(value,proto.signer.BodyPublicKey.deserializeBinaryFromReader);
      msg.setPubkey(value);
      break;
    case 4:
      var value = new proto.signer.BodyEncK;
      reader.readMessage(value,proto.signer.BodyEncK.deserializeBinaryFromReader);
      msg.setEnck(value);
      break;
    case 5:
      var value = new proto.signer.BodyMta;
      reader.readMessage(value,proto.signer.BodyMta.deserializeBinaryFromReader);
      msg.setMta(value);
      break;
    case 6:
      var value = new proto.signer.BodyDelta;
      reader.readMessage(value,proto.signer.BodyDelta.deserializeBinaryFromReader);
      msg.setDelta(value);
      break;
    case 7:
      var value = new proto.signer.BodyProofAi;
      reader.readMessage(value,proto.signer.BodyProofAi.deserializeBinaryFromReader);
      msg.setProofai(value);
      break;
    case 8:
      var value = new proto.signer.BodyCommitViAi;
      reader.readMessage(value,proto.signer.BodyCommitViAi.deserializeBinaryFromReader);
      msg.setCommitviai(value);
      break;
    case 9:
      var value = new proto.signer.BodyDecommitViAi;
      reader.readMessage(value,proto.signer.BodyDecommitViAi.deserializeBinaryFromReader);
      msg.setDecommitviai(value);
      break;
    case 10:
      var value = new proto.signer.BodyCommitUiTi;
      reader.readMessage(value,proto.signer.BodyCommitUiTi.deserializeBinaryFromReader);
      msg.setCommituiti(value);
      break;
    case 11:
      var value = new proto.signer.BodyDecommitUiTi;
      reader.readMessage(value,proto.signer.BodyDecommitUiTi.deserializeBinaryFromReader);
      msg.setDecommituiti(value);
      break;
    case 12:
      var value = new proto.signer.BodySi;
      reader.readMessage(value,proto.signer.BodySi.deserializeBinaryFromReader);
      msg.setSi(value);
      break;
    case 13:
      var value = new github_com_getamis_alice_crypto_oprf_message_pb.OprfRequestMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_oprf_message_pb.OprfRequestMessage.deserializeBinaryFromReader);
      msg.setOprfrequest(value);
      break;
    case 14:
      var value = new github_com_getamis_alice_crypto_oprf_message_pb.OprfResponseMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_oprf_message_pb.OprfResponseMessage.deserializeBinaryFromReader);
      msg.setOprfresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signer.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signer.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signer.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPubkey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.signer.BodyPublicKey.serializeBinaryToWriter
    );
  }
  f = message.getEnck();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.signer.BodyEncK.serializeBinaryToWriter
    );
  }
  f = message.getMta();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.signer.BodyMta.serializeBinaryToWriter
    );
  }
  f = message.getDelta();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.signer.BodyDelta.serializeBinaryToWriter
    );
  }
  f = message.getProofai();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.signer.BodyProofAi.serializeBinaryToWriter
    );
  }
  f = message.getCommitviai();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.signer.BodyCommitViAi.serializeBinaryToWriter
    );
  }
  f = message.getDecommitviai();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.signer.BodyDecommitViAi.serializeBinaryToWriter
    );
  }
  f = message.getCommituiti();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.signer.BodyCommitUiTi.serializeBinaryToWriter
    );
  }
  f = message.getDecommituiti();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.signer.BodyDecommitUiTi.serializeBinaryToWriter
    );
  }
  f = message.getSi();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.signer.BodySi.serializeBinaryToWriter
    );
  }
  f = message.getOprfrequest();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      github_com_getamis_alice_crypto_oprf_message_pb.OprfRequestMessage.serializeBinaryToWriter
    );
  }
  f = message.getOprfresponse();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      github_com_getamis_alice_crypto_oprf_message_pb.OprfResponseMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type type = 1;
 * @return {!proto.signer.Type}
 */
proto.signer.Message.prototype.getType = function() {
  return /** @type {!proto.signer.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.signer.Type} value */
proto.signer.Message.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.signer.Message.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.signer.Message.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional BodyPublicKey pubkey = 3;
 * @return {?proto.signer.BodyPublicKey}
 */
proto.signer.Message.prototype.getPubkey = function() {
  return /** @type{?proto.signer.BodyPublicKey} */ (
    jspb.Message.getWrapperField(this, proto.signer.BodyPublicKey, 3));
};


/** @param {?proto.signer.BodyPublicKey|undefined} value */
proto.signer.Message.prototype.setPubkey = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.signer.Message.oneofGroups_[0], value);
};


proto.signer.Message.prototype.clearPubkey = function() {
  this.setPubkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.Message.prototype.hasPubkey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BodyEncK encK = 4;
 * @return {?proto.signer.BodyEncK}
 */
proto.signer.Message.prototype.getEnck = function() {
  return /** @type{?proto.signer.BodyEncK} */ (
    jspb.Message.getWrapperField(this, proto.signer.BodyEncK, 4));
};


/** @param {?proto.signer.BodyEncK|undefined} value */
proto.signer.Message.prototype.setEnck = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.signer.Message.oneofGroups_[0], value);
};


proto.signer.Message.prototype.clearEnck = function() {
  this.setEnck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.Message.prototype.hasEnck = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BodyMta mta = 5;
 * @return {?proto.signer.BodyMta}
 */
proto.signer.Message.prototype.getMta = function() {
  return /** @type{?proto.signer.BodyMta} */ (
    jspb.Message.getWrapperField(this, proto.signer.BodyMta, 5));
};


/** @param {?proto.signer.BodyMta|undefined} value */
proto.signer.Message.prototype.setMta = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.signer.Message.oneofGroups_[0], value);
};


proto.signer.Message.prototype.clearMta = function() {
  this.setMta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.Message.prototype.hasMta = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BodyDelta delta = 6;
 * @return {?proto.signer.BodyDelta}
 */
proto.signer.Message.prototype.getDelta = function() {
  return /** @type{?proto.signer.BodyDelta} */ (
    jspb.Message.getWrapperField(this, proto.signer.BodyDelta, 6));
};


/** @param {?proto.signer.BodyDelta|undefined} value */
proto.signer.Message.prototype.setDelta = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.signer.Message.oneofGroups_[0], value);
};


proto.signer.Message.prototype.clearDelta = function() {
  this.setDelta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.Message.prototype.hasDelta = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional BodyProofAi proofAi = 7;
 * @return {?proto.signer.BodyProofAi}
 */
proto.signer.Message.prototype.getProofai = function() {
  return /** @type{?proto.signer.BodyProofAi} */ (
    jspb.Message.getWrapperField(this, proto.signer.BodyProofAi, 7));
};


/** @param {?proto.signer.BodyProofAi|undefined} value */
proto.signer.Message.prototype.setProofai = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.signer.Message.oneofGroups_[0], value);
};


proto.signer.Message.prototype.clearProofai = function() {
  this.setProofai(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.Message.prototype.hasProofai = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BodyCommitViAi commitViAi = 8;
 * @return {?proto.signer.BodyCommitViAi}
 */
proto.signer.Message.prototype.getCommitviai = function() {
  return /** @type{?proto.signer.BodyCommitViAi} */ (
    jspb.Message.getWrapperField(this, proto.signer.BodyCommitViAi, 8));
};


/** @param {?proto.signer.BodyCommitViAi|undefined} value */
proto.signer.Message.prototype.setCommitviai = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.signer.Message.oneofGroups_[0], value);
};


proto.signer.Message.prototype.clearCommitviai = function() {
  this.setCommitviai(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.Message.prototype.hasCommitviai = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional BodyDecommitViAi decommitViAi = 9;
 * @return {?proto.signer.BodyDecommitViAi}
 */
proto.signer.Message.prototype.getDecommitviai = function() {
  return /** @type{?proto.signer.BodyDecommitViAi} */ (
    jspb.Message.getWrapperField(this, proto.signer.BodyDecommitViAi, 9));
};


/** @param {?proto.signer.BodyDecommitViAi|undefined} value */
proto.signer.Message.prototype.setDecommitviai = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.signer.Message.oneofGroups_[0], value);
};


proto.signer.Message.prototype.clearDecommitviai = function() {
  this.setDecommitviai(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.Message.prototype.hasDecommitviai = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional BodyCommitUiTi commitUiTi = 10;
 * @return {?proto.signer.BodyCommitUiTi}
 */
proto.signer.Message.prototype.getCommituiti = function() {
  return /** @type{?proto.signer.BodyCommitUiTi} */ (
    jspb.Message.getWrapperField(this, proto.signer.BodyCommitUiTi, 10));
};


/** @param {?proto.signer.BodyCommitUiTi|undefined} value */
proto.signer.Message.prototype.setCommituiti = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.signer.Message.oneofGroups_[0], value);
};


proto.signer.Message.prototype.clearCommituiti = function() {
  this.setCommituiti(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.Message.prototype.hasCommituiti = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional BodyDecommitUiTi decommitUiTi = 11;
 * @return {?proto.signer.BodyDecommitUiTi}
 */
proto.signer.Message.prototype.getDecommituiti = function() {
  return /** @type{?proto.signer.BodyDecommitUiTi} */ (
    jspb.Message.getWrapperField(this, proto.signer.BodyDecommitUiTi, 11));
};


/** @param {?proto.signer.BodyDecommitUiTi|undefined} value */
proto.signer.Message.prototype.setDecommituiti = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.signer.Message.oneofGroups_[0], value);
};


proto.signer.Message.prototype.clearDecommituiti = function() {
  this.setDecommituiti(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.Message.prototype.hasDecommituiti = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional BodySi si = 12;
 * @return {?proto.signer.BodySi}
 */
proto.signer.Message.prototype.getSi = function() {
  return /** @type{?proto.signer.BodySi} */ (
    jspb.Message.getWrapperField(this, proto.signer.BodySi, 12));
};


/** @param {?proto.signer.BodySi|undefined} value */
proto.signer.Message.prototype.setSi = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.signer.Message.oneofGroups_[0], value);
};


proto.signer.Message.prototype.clearSi = function() {
  this.setSi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.Message.prototype.hasSi = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional oprf.OprfRequestMessage oprfRequest = 13;
 * @return {?proto.oprf.OprfRequestMessage}
 */
proto.signer.Message.prototype.getOprfrequest = function() {
  return /** @type{?proto.oprf.OprfRequestMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_oprf_message_pb.OprfRequestMessage, 13));
};


/** @param {?proto.oprf.OprfRequestMessage|undefined} value */
proto.signer.Message.prototype.setOprfrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.signer.Message.oneofGroups_[0], value);
};


proto.signer.Message.prototype.clearOprfrequest = function() {
  this.setOprfrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.Message.prototype.hasOprfrequest = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional oprf.OprfResponseMessage oprfResponse = 14;
 * @return {?proto.oprf.OprfResponseMessage}
 */
proto.signer.Message.prototype.getOprfresponse = function() {
  return /** @type{?proto.oprf.OprfResponseMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_oprf_message_pb.OprfResponseMessage, 14));
};


/** @param {?proto.oprf.OprfResponseMessage|undefined} value */
proto.signer.Message.prototype.setOprfresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.signer.Message.oneofGroups_[0], value);
};


proto.signer.Message.prototype.clearOprfresponse = function() {
  this.setOprfresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.Message.prototype.hasOprfresponse = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signer.BodyPublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signer.BodyPublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.signer.BodyPublicKey.displayName = 'proto.signer.BodyPublicKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signer.BodyPublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.signer.BodyPublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signer.BodyPublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyPublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: msg.getPubkey_asB64(),
    agcommitment: (f = msg.getAgcommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signer.BodyPublicKey}
 */
proto.signer.BodyPublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signer.BodyPublicKey;
  return proto.signer.BodyPublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signer.BodyPublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signer.BodyPublicKey}
 */
proto.signer.BodyPublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 3:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.deserializeBinaryFromReader);
      msg.setAgcommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signer.BodyPublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signer.BodyPublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signer.BodyPublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyPublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAgcommitment();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes pubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.signer.BodyPublicKey.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubkey = 1;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.signer.BodyPublicKey.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.signer.BodyPublicKey.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.signer.BodyPublicKey.prototype.setPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional commitment.HashCommitmentMessage agCommitment = 3;
 * @return {?proto.commitment.HashCommitmentMessage}
 */
proto.signer.BodyPublicKey.prototype.getAgcommitment = function() {
  return /** @type{?proto.commitment.HashCommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage, 3));
};


/** @param {?proto.commitment.HashCommitmentMessage|undefined} value */
proto.signer.BodyPublicKey.prototype.setAgcommitment = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.signer.BodyPublicKey.prototype.clearAgcommitment = function() {
  this.setAgcommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyPublicKey.prototype.hasAgcommitment = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signer.BodyEncK = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signer.BodyEncK, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.signer.BodyEncK.displayName = 'proto.signer.BodyEncK';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signer.BodyEncK.prototype.toObject = function(opt_includeInstance) {
  return proto.signer.BodyEncK.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signer.BodyEncK} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyEncK.toObject = function(includeInstance, msg) {
  var f, obj = {
    enck: msg.getEnck_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signer.BodyEncK}
 */
proto.signer.BodyEncK.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signer.BodyEncK;
  return proto.signer.BodyEncK.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signer.BodyEncK} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signer.BodyEncK}
 */
proto.signer.BodyEncK.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEnck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signer.BodyEncK.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signer.BodyEncK.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signer.BodyEncK} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyEncK.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnck_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes enck = 2;
 * @return {!(string|Uint8Array)}
 */
proto.signer.BodyEncK.prototype.getEnck = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes enck = 2;
 * This is a type-conversion wrapper around `getEnck()`
 * @return {string}
 */
proto.signer.BodyEncK.prototype.getEnck_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEnck()));
};


/**
 * optional bytes enck = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEnck()`
 * @return {!Uint8Array}
 */
proto.signer.BodyEncK.prototype.getEnck_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEnck()));
};


/** @param {!(string|Uint8Array)} value */
proto.signer.BodyEncK.prototype.setEnck = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signer.BodyMta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signer.BodyMta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.signer.BodyMta.displayName = 'proto.signer.BodyMta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signer.BodyMta.prototype.toObject = function(opt_includeInstance) {
  return proto.signer.BodyMta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signer.BodyMta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyMta.toObject = function(includeInstance, msg) {
  var f, obj = {
    encaialpha: msg.getEncaialpha_asB64(),
    encwialpha: msg.getEncwialpha_asB64(),
    wiproof: msg.getWiproof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signer.BodyMta}
 */
proto.signer.BodyMta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signer.BodyMta;
  return proto.signer.BodyMta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signer.BodyMta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signer.BodyMta}
 */
proto.signer.BodyMta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncaialpha(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncwialpha(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWiproof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signer.BodyMta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signer.BodyMta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signer.BodyMta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyMta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncaialpha_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEncwialpha_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getWiproof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes encAiAlpha = 1;
 * @return {!(string|Uint8Array)}
 */
proto.signer.BodyMta.prototype.getEncaialpha = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes encAiAlpha = 1;
 * This is a type-conversion wrapper around `getEncaialpha()`
 * @return {string}
 */
proto.signer.BodyMta.prototype.getEncaialpha_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncaialpha()));
};


/**
 * optional bytes encAiAlpha = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncaialpha()`
 * @return {!Uint8Array}
 */
proto.signer.BodyMta.prototype.getEncaialpha_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncaialpha()));
};


/** @param {!(string|Uint8Array)} value */
proto.signer.BodyMta.prototype.setEncaialpha = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes encWiAlpha = 2;
 * @return {!(string|Uint8Array)}
 */
proto.signer.BodyMta.prototype.getEncwialpha = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes encWiAlpha = 2;
 * This is a type-conversion wrapper around `getEncwialpha()`
 * @return {string}
 */
proto.signer.BodyMta.prototype.getEncwialpha_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncwialpha()));
};


/**
 * optional bytes encWiAlpha = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncwialpha()`
 * @return {!Uint8Array}
 */
proto.signer.BodyMta.prototype.getEncwialpha_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncwialpha()));
};


/** @param {!(string|Uint8Array)} value */
proto.signer.BodyMta.prototype.setEncwialpha = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes wiProof = 3;
 * @return {!(string|Uint8Array)}
 */
proto.signer.BodyMta.prototype.getWiproof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes wiProof = 3;
 * This is a type-conversion wrapper around `getWiproof()`
 * @return {string}
 */
proto.signer.BodyMta.prototype.getWiproof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWiproof()));
};


/**
 * optional bytes wiProof = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWiproof()`
 * @return {!Uint8Array}
 */
proto.signer.BodyMta.prototype.getWiproof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWiproof()));
};


/** @param {!(string|Uint8Array)} value */
proto.signer.BodyMta.prototype.setWiproof = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signer.BodyDelta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signer.BodyDelta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.signer.BodyDelta.displayName = 'proto.signer.BodyDelta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signer.BodyDelta.prototype.toObject = function(opt_includeInstance) {
  return proto.signer.BodyDelta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signer.BodyDelta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyDelta.toObject = function(includeInstance, msg) {
  var f, obj = {
    delta: msg.getDelta_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signer.BodyDelta}
 */
proto.signer.BodyDelta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signer.BodyDelta;
  return proto.signer.BodyDelta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signer.BodyDelta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signer.BodyDelta}
 */
proto.signer.BodyDelta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDelta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signer.BodyDelta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signer.BodyDelta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signer.BodyDelta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyDelta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelta_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes delta = 1;
 * @return {!(string|Uint8Array)}
 */
proto.signer.BodyDelta.prototype.getDelta = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes delta = 1;
 * This is a type-conversion wrapper around `getDelta()`
 * @return {string}
 */
proto.signer.BodyDelta.prototype.getDelta_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDelta()));
};


/**
 * optional bytes delta = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDelta()`
 * @return {!Uint8Array}
 */
proto.signer.BodyDelta.prototype.getDelta_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDelta()));
};


/** @param {!(string|Uint8Array)} value */
proto.signer.BodyDelta.prototype.setDelta = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signer.BodyProofAi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signer.BodyProofAi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.signer.BodyProofAi.displayName = 'proto.signer.BodyProofAi';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signer.BodyProofAi.prototype.toObject = function(opt_includeInstance) {
  return proto.signer.BodyProofAi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signer.BodyProofAi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyProofAi.toObject = function(includeInstance, msg) {
  var f, obj = {
    agdecommitment: (f = msg.getAgdecommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.toObject(includeInstance, f),
    aiproof: (f = msg.getAiproof()) && github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signer.BodyProofAi}
 */
proto.signer.BodyProofAi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signer.BodyProofAi;
  return proto.signer.BodyProofAi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signer.BodyProofAi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signer.BodyProofAi}
 */
proto.signer.BodyProofAi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.deserializeBinaryFromReader);
      msg.setAgdecommitment(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.deserializeBinaryFromReader);
      msg.setAiproof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signer.BodyProofAi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signer.BodyProofAi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signer.BodyProofAi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyProofAi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgdecommitment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.serializeBinaryToWriter
    );
  }
  f = message.getAiproof();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional commitment.HashDecommitmentMessage agDecommitment = 1;
 * @return {?proto.commitment.HashDecommitmentMessage}
 */
proto.signer.BodyProofAi.prototype.getAgdecommitment = function() {
  return /** @type{?proto.commitment.HashDecommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage, 1));
};


/** @param {?proto.commitment.HashDecommitmentMessage|undefined} value */
proto.signer.BodyProofAi.prototype.setAgdecommitment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.signer.BodyProofAi.prototype.clearAgdecommitment = function() {
  this.setAgdecommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyProofAi.prototype.hasAgdecommitment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional zkproof.SchnorrProofMessage aiProof = 2;
 * @return {?proto.zkproof.SchnorrProofMessage}
 */
proto.signer.BodyProofAi.prototype.getAiproof = function() {
  return /** @type{?proto.zkproof.SchnorrProofMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage, 2));
};


/** @param {?proto.zkproof.SchnorrProofMessage|undefined} value */
proto.signer.BodyProofAi.prototype.setAiproof = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.signer.BodyProofAi.prototype.clearAiproof = function() {
  this.setAiproof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyProofAi.prototype.hasAiproof = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signer.BodyCommitViAi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signer.BodyCommitViAi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.signer.BodyCommitViAi.displayName = 'proto.signer.BodyCommitViAi';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signer.BodyCommitViAi.prototype.toObject = function(opt_includeInstance) {
  return proto.signer.BodyCommitViAi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signer.BodyCommitViAi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyCommitViAi.toObject = function(includeInstance, msg) {
  var f, obj = {
    vicommitment: (f = msg.getVicommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.toObject(includeInstance, f),
    aicommitment: (f = msg.getAicommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signer.BodyCommitViAi}
 */
proto.signer.BodyCommitViAi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signer.BodyCommitViAi;
  return proto.signer.BodyCommitViAi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signer.BodyCommitViAi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signer.BodyCommitViAi}
 */
proto.signer.BodyCommitViAi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.deserializeBinaryFromReader);
      msg.setVicommitment(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.deserializeBinaryFromReader);
      msg.setAicommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signer.BodyCommitViAi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signer.BodyCommitViAi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signer.BodyCommitViAi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyCommitViAi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVicommitment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.serializeBinaryToWriter
    );
  }
  f = message.getAicommitment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional commitment.HashCommitmentMessage viCommitment = 1;
 * @return {?proto.commitment.HashCommitmentMessage}
 */
proto.signer.BodyCommitViAi.prototype.getVicommitment = function() {
  return /** @type{?proto.commitment.HashCommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage, 1));
};


/** @param {?proto.commitment.HashCommitmentMessage|undefined} value */
proto.signer.BodyCommitViAi.prototype.setVicommitment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.signer.BodyCommitViAi.prototype.clearVicommitment = function() {
  this.setVicommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyCommitViAi.prototype.hasVicommitment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional commitment.HashCommitmentMessage aiCommitment = 2;
 * @return {?proto.commitment.HashCommitmentMessage}
 */
proto.signer.BodyCommitViAi.prototype.getAicommitment = function() {
  return /** @type{?proto.commitment.HashCommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage, 2));
};


/** @param {?proto.commitment.HashCommitmentMessage|undefined} value */
proto.signer.BodyCommitViAi.prototype.setAicommitment = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.signer.BodyCommitViAi.prototype.clearAicommitment = function() {
  this.setAicommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyCommitViAi.prototype.hasAicommitment = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signer.BodyDecommitViAi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signer.BodyDecommitViAi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.signer.BodyDecommitViAi.displayName = 'proto.signer.BodyDecommitViAi';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signer.BodyDecommitViAi.prototype.toObject = function(opt_includeInstance) {
  return proto.signer.BodyDecommitViAi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signer.BodyDecommitViAi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyDecommitViAi.toObject = function(includeInstance, msg) {
  var f, obj = {
    videcommitment: (f = msg.getVidecommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.toObject(includeInstance, f),
    aidecommitment: (f = msg.getAidecommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.toObject(includeInstance, f),
    rhoiproof: (f = msg.getRhoiproof()) && github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.toObject(includeInstance, f),
    liproof: (f = msg.getLiproof()) && github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signer.BodyDecommitViAi}
 */
proto.signer.BodyDecommitViAi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signer.BodyDecommitViAi;
  return proto.signer.BodyDecommitViAi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signer.BodyDecommitViAi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signer.BodyDecommitViAi}
 */
proto.signer.BodyDecommitViAi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.deserializeBinaryFromReader);
      msg.setVidecommitment(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.deserializeBinaryFromReader);
      msg.setAidecommitment(value);
      break;
    case 3:
      var value = new github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.deserializeBinaryFromReader);
      msg.setRhoiproof(value);
      break;
    case 4:
      var value = new github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.deserializeBinaryFromReader);
      msg.setLiproof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signer.BodyDecommitViAi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signer.BodyDecommitViAi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signer.BodyDecommitViAi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyDecommitViAi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVidecommitment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.serializeBinaryToWriter
    );
  }
  f = message.getAidecommitment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.serializeBinaryToWriter
    );
  }
  f = message.getRhoiproof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.serializeBinaryToWriter
    );
  }
  f = message.getLiproof();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional commitment.HashDecommitmentMessage viDecommitment = 1;
 * @return {?proto.commitment.HashDecommitmentMessage}
 */
proto.signer.BodyDecommitViAi.prototype.getVidecommitment = function() {
  return /** @type{?proto.commitment.HashDecommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage, 1));
};


/** @param {?proto.commitment.HashDecommitmentMessage|undefined} value */
proto.signer.BodyDecommitViAi.prototype.setVidecommitment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.signer.BodyDecommitViAi.prototype.clearVidecommitment = function() {
  this.setVidecommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyDecommitViAi.prototype.hasVidecommitment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional commitment.HashDecommitmentMessage aiDecommitment = 2;
 * @return {?proto.commitment.HashDecommitmentMessage}
 */
proto.signer.BodyDecommitViAi.prototype.getAidecommitment = function() {
  return /** @type{?proto.commitment.HashDecommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage, 2));
};


/** @param {?proto.commitment.HashDecommitmentMessage|undefined} value */
proto.signer.BodyDecommitViAi.prototype.setAidecommitment = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.signer.BodyDecommitViAi.prototype.clearAidecommitment = function() {
  this.setAidecommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyDecommitViAi.prototype.hasAidecommitment = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional zkproof.SchnorrProofMessage rhoIProof = 3;
 * @return {?proto.zkproof.SchnorrProofMessage}
 */
proto.signer.BodyDecommitViAi.prototype.getRhoiproof = function() {
  return /** @type{?proto.zkproof.SchnorrProofMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage, 3));
};


/** @param {?proto.zkproof.SchnorrProofMessage|undefined} value */
proto.signer.BodyDecommitViAi.prototype.setRhoiproof = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.signer.BodyDecommitViAi.prototype.clearRhoiproof = function() {
  this.setRhoiproof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyDecommitViAi.prototype.hasRhoiproof = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional zkproof.SchnorrProofMessage liProof = 4;
 * @return {?proto.zkproof.SchnorrProofMessage}
 */
proto.signer.BodyDecommitViAi.prototype.getLiproof = function() {
  return /** @type{?proto.zkproof.SchnorrProofMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage, 4));
};


/** @param {?proto.zkproof.SchnorrProofMessage|undefined} value */
proto.signer.BodyDecommitViAi.prototype.setLiproof = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.signer.BodyDecommitViAi.prototype.clearLiproof = function() {
  this.setLiproof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyDecommitViAi.prototype.hasLiproof = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signer.BodyCommitUiTi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signer.BodyCommitUiTi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.signer.BodyCommitUiTi.displayName = 'proto.signer.BodyCommitUiTi';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signer.BodyCommitUiTi.prototype.toObject = function(opt_includeInstance) {
  return proto.signer.BodyCommitUiTi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signer.BodyCommitUiTi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyCommitUiTi.toObject = function(includeInstance, msg) {
  var f, obj = {
    uicommitment: (f = msg.getUicommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.toObject(includeInstance, f),
    ticommitment: (f = msg.getTicommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signer.BodyCommitUiTi}
 */
proto.signer.BodyCommitUiTi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signer.BodyCommitUiTi;
  return proto.signer.BodyCommitUiTi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signer.BodyCommitUiTi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signer.BodyCommitUiTi}
 */
proto.signer.BodyCommitUiTi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.deserializeBinaryFromReader);
      msg.setUicommitment(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.deserializeBinaryFromReader);
      msg.setTicommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signer.BodyCommitUiTi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signer.BodyCommitUiTi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signer.BodyCommitUiTi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyCommitUiTi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUicommitment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.serializeBinaryToWriter
    );
  }
  f = message.getTicommitment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional commitment.HashCommitmentMessage uiCommitment = 1;
 * @return {?proto.commitment.HashCommitmentMessage}
 */
proto.signer.BodyCommitUiTi.prototype.getUicommitment = function() {
  return /** @type{?proto.commitment.HashCommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage, 1));
};


/** @param {?proto.commitment.HashCommitmentMessage|undefined} value */
proto.signer.BodyCommitUiTi.prototype.setUicommitment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.signer.BodyCommitUiTi.prototype.clearUicommitment = function() {
  this.setUicommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyCommitUiTi.prototype.hasUicommitment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional commitment.HashCommitmentMessage tiCommitment = 2;
 * @return {?proto.commitment.HashCommitmentMessage}
 */
proto.signer.BodyCommitUiTi.prototype.getTicommitment = function() {
  return /** @type{?proto.commitment.HashCommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage, 2));
};


/** @param {?proto.commitment.HashCommitmentMessage|undefined} value */
proto.signer.BodyCommitUiTi.prototype.setTicommitment = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.signer.BodyCommitUiTi.prototype.clearTicommitment = function() {
  this.setTicommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyCommitUiTi.prototype.hasTicommitment = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signer.BodyDecommitUiTi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signer.BodyDecommitUiTi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.signer.BodyDecommitUiTi.displayName = 'proto.signer.BodyDecommitUiTi';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signer.BodyDecommitUiTi.prototype.toObject = function(opt_includeInstance) {
  return proto.signer.BodyDecommitUiTi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signer.BodyDecommitUiTi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyDecommitUiTi.toObject = function(includeInstance, msg) {
  var f, obj = {
    uidecommitment: (f = msg.getUidecommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.toObject(includeInstance, f),
    tidecommitment: (f = msg.getTidecommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signer.BodyDecommitUiTi}
 */
proto.signer.BodyDecommitUiTi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signer.BodyDecommitUiTi;
  return proto.signer.BodyDecommitUiTi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signer.BodyDecommitUiTi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signer.BodyDecommitUiTi}
 */
proto.signer.BodyDecommitUiTi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.deserializeBinaryFromReader);
      msg.setUidecommitment(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.deserializeBinaryFromReader);
      msg.setTidecommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signer.BodyDecommitUiTi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signer.BodyDecommitUiTi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signer.BodyDecommitUiTi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodyDecommitUiTi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUidecommitment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.serializeBinaryToWriter
    );
  }
  f = message.getTidecommitment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional commitment.HashDecommitmentMessage uiDecommitment = 1;
 * @return {?proto.commitment.HashDecommitmentMessage}
 */
proto.signer.BodyDecommitUiTi.prototype.getUidecommitment = function() {
  return /** @type{?proto.commitment.HashDecommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage, 1));
};


/** @param {?proto.commitment.HashDecommitmentMessage|undefined} value */
proto.signer.BodyDecommitUiTi.prototype.setUidecommitment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.signer.BodyDecommitUiTi.prototype.clearUidecommitment = function() {
  this.setUidecommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyDecommitUiTi.prototype.hasUidecommitment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional commitment.HashDecommitmentMessage tiDecommitment = 2;
 * @return {?proto.commitment.HashDecommitmentMessage}
 */
proto.signer.BodyDecommitUiTi.prototype.getTidecommitment = function() {
  return /** @type{?proto.commitment.HashDecommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage, 2));
};


/** @param {?proto.commitment.HashDecommitmentMessage|undefined} value */
proto.signer.BodyDecommitUiTi.prototype.setTidecommitment = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.signer.BodyDecommitUiTi.prototype.clearTidecommitment = function() {
  this.setTidecommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.signer.BodyDecommitUiTi.prototype.hasTidecommitment = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signer.BodySi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signer.BodySi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.signer.BodySi.displayName = 'proto.signer.BodySi';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signer.BodySi.prototype.toObject = function(opt_includeInstance) {
  return proto.signer.BodySi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signer.BodySi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodySi.toObject = function(includeInstance, msg) {
  var f, obj = {
    si: msg.getSi_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signer.BodySi}
 */
proto.signer.BodySi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signer.BodySi;
  return proto.signer.BodySi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signer.BodySi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signer.BodySi}
 */
proto.signer.BodySi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signer.BodySi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signer.BodySi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signer.BodySi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signer.BodySi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSi_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes si = 1;
 * @return {!(string|Uint8Array)}
 */
proto.signer.BodySi.prototype.getSi = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes si = 1;
 * This is a type-conversion wrapper around `getSi()`
 * @return {string}
 */
proto.signer.BodySi.prototype.getSi_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSi()));
};


/**
 * optional bytes si = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSi()`
 * @return {!Uint8Array}
 */
proto.signer.BodySi.prototype.getSi_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSi()));
};


/** @param {!(string|Uint8Array)} value */
proto.signer.BodySi.prototype.setSi = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.signer.Type = {
  PUBKEY: 0,
  ENCK: 1,
  MTA: 2,
  DELTA: 3,
  PROOFAI: 4,
  COMMITVIAI: 5,
  DECOMMITVIAI: 6,
  COMMITUITI: 7,
  DECOMMITUITI: 8,
  SI: 9,
  OPRFREQUEST: 10,
  OPRFRESPONSE: 11
};

goog.object.extend(exports, proto.signer);
