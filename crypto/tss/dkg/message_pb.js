/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb = require('../../../../../../github.com/getamis/alice/crypto/birkhoffinterpolation/bk_pb.js');
var github_com_getamis_alice_crypto_commitment_message_pb = require('../../../../../../github.com/getamis/alice/crypto/commitment/message_pb.js');
var github_com_getamis_alice_crypto_zkproof_message_pb = require('../../../../../../github.com/getamis/alice/crypto/zkproof/message_pb.js');
var github_com_getamis_alice_crypto_oprf_message_pb = require('../../../../../../github.com/getamis/alice/crypto/oprf/message_pb.js');
goog.exportSymbol('proto.dkg.BodyDecommit', null, global);
goog.exportSymbol('proto.dkg.BodyOPRFRequest', null, global);
goog.exportSymbol('proto.dkg.BodyPeer', null, global);
goog.exportSymbol('proto.dkg.BodyResult', null, global);
goog.exportSymbol('proto.dkg.BodyVerify', null, global);
goog.exportSymbol('proto.dkg.Message', null, global);
goog.exportSymbol('proto.dkg.Type', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dkg.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.dkg.Message.oneofGroups_);
};
goog.inherits(proto.dkg.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dkg.Message.displayName = 'proto.dkg.Message';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.dkg.Message.oneofGroups_ = [[3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.dkg.Message.BodyCase = {
  BODY_NOT_SET: 0,
  PEER: 3,
  DECOMMIT: 4,
  VERIFY: 5,
  RESULT: 6,
  OPRFREQUEST: 7,
  OPRFRESPONSE: 8
};

/**
 * @return {proto.dkg.Message.BodyCase}
 */
proto.dkg.Message.prototype.getBodyCase = function() {
  return /** @type {proto.dkg.Message.BodyCase} */(jspb.Message.computeOneofCase(this, proto.dkg.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dkg.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.dkg.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dkg.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dkg.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    peer: (f = msg.getPeer()) && proto.dkg.BodyPeer.toObject(includeInstance, f),
    decommit: (f = msg.getDecommit()) && proto.dkg.BodyDecommit.toObject(includeInstance, f),
    verify: (f = msg.getVerify()) && proto.dkg.BodyVerify.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.dkg.BodyResult.toObject(includeInstance, f),
    oprfrequest: (f = msg.getOprfrequest()) && proto.dkg.BodyOPRFRequest.toObject(includeInstance, f),
    oprfresponse: (f = msg.getOprfresponse()) && github_com_getamis_alice_crypto_oprf_message_pb.OprfResponseMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dkg.Message}
 */
proto.dkg.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dkg.Message;
  return proto.dkg.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dkg.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dkg.Message}
 */
proto.dkg.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dkg.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.dkg.BodyPeer;
      reader.readMessage(value,proto.dkg.BodyPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 4:
      var value = new proto.dkg.BodyDecommit;
      reader.readMessage(value,proto.dkg.BodyDecommit.deserializeBinaryFromReader);
      msg.setDecommit(value);
      break;
    case 5:
      var value = new proto.dkg.BodyVerify;
      reader.readMessage(value,proto.dkg.BodyVerify.deserializeBinaryFromReader);
      msg.setVerify(value);
      break;
    case 6:
      var value = new proto.dkg.BodyResult;
      reader.readMessage(value,proto.dkg.BodyResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 7:
      var value = new proto.dkg.BodyOPRFRequest;
      reader.readMessage(value,proto.dkg.BodyOPRFRequest.deserializeBinaryFromReader);
      msg.setOprfrequest(value);
      break;
    case 8:
      var value = new github_com_getamis_alice_crypto_oprf_message_pb.OprfResponseMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_oprf_message_pb.OprfResponseMessage.deserializeBinaryFromReader);
      msg.setOprfresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dkg.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dkg.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dkg.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dkg.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dkg.BodyPeer.serializeBinaryToWriter
    );
  }
  f = message.getDecommit();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dkg.BodyDecommit.serializeBinaryToWriter
    );
  }
  f = message.getVerify();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.dkg.BodyVerify.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.dkg.BodyResult.serializeBinaryToWriter
    );
  }
  f = message.getOprfrequest();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.dkg.BodyOPRFRequest.serializeBinaryToWriter
    );
  }
  f = message.getOprfresponse();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      github_com_getamis_alice_crypto_oprf_message_pb.OprfResponseMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type type = 1;
 * @return {!proto.dkg.Type}
 */
proto.dkg.Message.prototype.getType = function() {
  return /** @type {!proto.dkg.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.dkg.Type} value */
proto.dkg.Message.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.dkg.Message.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.dkg.Message.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional BodyPeer peer = 3;
 * @return {?proto.dkg.BodyPeer}
 */
proto.dkg.Message.prototype.getPeer = function() {
  return /** @type{?proto.dkg.BodyPeer} */ (
    jspb.Message.getWrapperField(this, proto.dkg.BodyPeer, 3));
};


/** @param {?proto.dkg.BodyPeer|undefined} value */
proto.dkg.Message.prototype.setPeer = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.dkg.Message.oneofGroups_[0], value);
};


proto.dkg.Message.prototype.clearPeer = function() {
  this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.Message.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BodyDecommit decommit = 4;
 * @return {?proto.dkg.BodyDecommit}
 */
proto.dkg.Message.prototype.getDecommit = function() {
  return /** @type{?proto.dkg.BodyDecommit} */ (
    jspb.Message.getWrapperField(this, proto.dkg.BodyDecommit, 4));
};


/** @param {?proto.dkg.BodyDecommit|undefined} value */
proto.dkg.Message.prototype.setDecommit = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.dkg.Message.oneofGroups_[0], value);
};


proto.dkg.Message.prototype.clearDecommit = function() {
  this.setDecommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.Message.prototype.hasDecommit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BodyVerify verify = 5;
 * @return {?proto.dkg.BodyVerify}
 */
proto.dkg.Message.prototype.getVerify = function() {
  return /** @type{?proto.dkg.BodyVerify} */ (
    jspb.Message.getWrapperField(this, proto.dkg.BodyVerify, 5));
};


/** @param {?proto.dkg.BodyVerify|undefined} value */
proto.dkg.Message.prototype.setVerify = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.dkg.Message.oneofGroups_[0], value);
};


proto.dkg.Message.prototype.clearVerify = function() {
  this.setVerify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.Message.prototype.hasVerify = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BodyResult result = 6;
 * @return {?proto.dkg.BodyResult}
 */
proto.dkg.Message.prototype.getResult = function() {
  return /** @type{?proto.dkg.BodyResult} */ (
    jspb.Message.getWrapperField(this, proto.dkg.BodyResult, 6));
};


/** @param {?proto.dkg.BodyResult|undefined} value */
proto.dkg.Message.prototype.setResult = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.dkg.Message.oneofGroups_[0], value);
};


proto.dkg.Message.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.Message.prototype.hasResult = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional BodyOPRFRequest oprfRequest = 7;
 * @return {?proto.dkg.BodyOPRFRequest}
 */
proto.dkg.Message.prototype.getOprfrequest = function() {
  return /** @type{?proto.dkg.BodyOPRFRequest} */ (
    jspb.Message.getWrapperField(this, proto.dkg.BodyOPRFRequest, 7));
};


/** @param {?proto.dkg.BodyOPRFRequest|undefined} value */
proto.dkg.Message.prototype.setOprfrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.dkg.Message.oneofGroups_[0], value);
};


proto.dkg.Message.prototype.clearOprfrequest = function() {
  this.setOprfrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.Message.prototype.hasOprfrequest = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional oprf.OprfResponseMessage oprfResponse = 8;
 * @return {?proto.oprf.OprfResponseMessage}
 */
proto.dkg.Message.prototype.getOprfresponse = function() {
  return /** @type{?proto.oprf.OprfResponseMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_oprf_message_pb.OprfResponseMessage, 8));
};


/** @param {?proto.oprf.OprfResponseMessage|undefined} value */
proto.dkg.Message.prototype.setOprfresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.dkg.Message.oneofGroups_[0], value);
};


proto.dkg.Message.prototype.clearOprfresponse = function() {
  this.setOprfresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.Message.prototype.hasOprfresponse = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dkg.BodyPeer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dkg.BodyPeer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dkg.BodyPeer.displayName = 'proto.dkg.BodyPeer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dkg.BodyPeer.prototype.toObject = function(opt_includeInstance) {
  return proto.dkg.BodyPeer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dkg.BodyPeer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dkg.BodyPeer.toObject = function(includeInstance, msg) {
  var f, obj = {
    bk: (f = msg.getBk()) && github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage.toObject(includeInstance, f),
    commitment: (f = msg.getCommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dkg.BodyPeer}
 */
proto.dkg.BodyPeer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dkg.BodyPeer;
  return proto.dkg.BodyPeer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dkg.BodyPeer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dkg.BodyPeer}
 */
proto.dkg.BodyPeer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage.deserializeBinaryFromReader);
      msg.setBk(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.deserializeBinaryFromReader);
      msg.setCommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dkg.BodyPeer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dkg.BodyPeer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dkg.BodyPeer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dkg.BodyPeer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage.serializeBinaryToWriter
    );
  }
  f = message.getCommitment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional birkhoffinterpolation.BkParameterMessage bk = 1;
 * @return {?proto.birkhoffinterpolation.BkParameterMessage}
 */
proto.dkg.BodyPeer.prototype.getBk = function() {
  return /** @type{?proto.birkhoffinterpolation.BkParameterMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_birkhoffinterpolation_bk_pb.BkParameterMessage, 1));
};


/** @param {?proto.birkhoffinterpolation.BkParameterMessage|undefined} value */
proto.dkg.BodyPeer.prototype.setBk = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dkg.BodyPeer.prototype.clearBk = function() {
  this.setBk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.BodyPeer.prototype.hasBk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional commitment.HashCommitmentMessage commitment = 2;
 * @return {?proto.commitment.HashCommitmentMessage}
 */
proto.dkg.BodyPeer.prototype.getCommitment = function() {
  return /** @type{?proto.commitment.HashCommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.HashCommitmentMessage, 2));
};


/** @param {?proto.commitment.HashCommitmentMessage|undefined} value */
proto.dkg.BodyPeer.prototype.setCommitment = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.dkg.BodyPeer.prototype.clearCommitment = function() {
  this.setCommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.BodyPeer.prototype.hasCommitment = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dkg.BodyDecommit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dkg.BodyDecommit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dkg.BodyDecommit.displayName = 'proto.dkg.BodyDecommit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dkg.BodyDecommit.prototype.toObject = function(opt_includeInstance) {
  return proto.dkg.BodyDecommit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dkg.BodyDecommit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dkg.BodyDecommit.toObject = function(includeInstance, msg) {
  var f, obj = {
    hashdecommitment: (f = msg.getHashdecommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.toObject(includeInstance, f),
    pointcommitment: (f = msg.getPointcommitment()) && github_com_getamis_alice_crypto_commitment_message_pb.PointCommitmentMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dkg.BodyDecommit}
 */
proto.dkg.BodyDecommit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dkg.BodyDecommit;
  return proto.dkg.BodyDecommit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dkg.BodyDecommit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dkg.BodyDecommit}
 */
proto.dkg.BodyDecommit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.deserializeBinaryFromReader);
      msg.setHashdecommitment(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.PointCommitmentMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.PointCommitmentMessage.deserializeBinaryFromReader);
      msg.setPointcommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dkg.BodyDecommit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dkg.BodyDecommit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dkg.BodyDecommit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dkg.BodyDecommit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHashdecommitment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage.serializeBinaryToWriter
    );
  }
  f = message.getPointcommitment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.PointCommitmentMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional commitment.HashDecommitmentMessage hashDecommitment = 1;
 * @return {?proto.commitment.HashDecommitmentMessage}
 */
proto.dkg.BodyDecommit.prototype.getHashdecommitment = function() {
  return /** @type{?proto.commitment.HashDecommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.HashDecommitmentMessage, 1));
};


/** @param {?proto.commitment.HashDecommitmentMessage|undefined} value */
proto.dkg.BodyDecommit.prototype.setHashdecommitment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dkg.BodyDecommit.prototype.clearHashdecommitment = function() {
  this.setHashdecommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.BodyDecommit.prototype.hasHashdecommitment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional commitment.PointCommitmentMessage pointCommitment = 2;
 * @return {?proto.commitment.PointCommitmentMessage}
 */
proto.dkg.BodyDecommit.prototype.getPointcommitment = function() {
  return /** @type{?proto.commitment.PointCommitmentMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.PointCommitmentMessage, 2));
};


/** @param {?proto.commitment.PointCommitmentMessage|undefined} value */
proto.dkg.BodyDecommit.prototype.setPointcommitment = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.dkg.BodyDecommit.prototype.clearPointcommitment = function() {
  this.setPointcommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.BodyDecommit.prototype.hasPointcommitment = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dkg.BodyVerify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dkg.BodyVerify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dkg.BodyVerify.displayName = 'proto.dkg.BodyVerify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dkg.BodyVerify.prototype.toObject = function(opt_includeInstance) {
  return proto.dkg.BodyVerify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dkg.BodyVerify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dkg.BodyVerify.toObject = function(includeInstance, msg) {
  var f, obj = {
    verify: (f = msg.getVerify()) && github_com_getamis_alice_crypto_commitment_message_pb.FeldmanVerifyMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dkg.BodyVerify}
 */
proto.dkg.BodyVerify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dkg.BodyVerify;
  return proto.dkg.BodyVerify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dkg.BodyVerify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dkg.BodyVerify}
 */
proto.dkg.BodyVerify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_commitment_message_pb.FeldmanVerifyMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_commitment_message_pb.FeldmanVerifyMessage.deserializeBinaryFromReader);
      msg.setVerify(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dkg.BodyVerify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dkg.BodyVerify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dkg.BodyVerify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dkg.BodyVerify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerify();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_commitment_message_pb.FeldmanVerifyMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional commitment.FeldmanVerifyMessage verify = 1;
 * @return {?proto.commitment.FeldmanVerifyMessage}
 */
proto.dkg.BodyVerify.prototype.getVerify = function() {
  return /** @type{?proto.commitment.FeldmanVerifyMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_commitment_message_pb.FeldmanVerifyMessage, 1));
};


/** @param {?proto.commitment.FeldmanVerifyMessage|undefined} value */
proto.dkg.BodyVerify.prototype.setVerify = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dkg.BodyVerify.prototype.clearVerify = function() {
  this.setVerify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.BodyVerify.prototype.hasVerify = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dkg.BodyResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dkg.BodyResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dkg.BodyResult.displayName = 'proto.dkg.BodyResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dkg.BodyResult.prototype.toObject = function(opt_includeInstance) {
  return proto.dkg.BodyResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dkg.BodyResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dkg.BodyResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    sigproofmsg: (f = msg.getSigproofmsg()) && github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dkg.BodyResult}
 */
proto.dkg.BodyResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dkg.BodyResult;
  return proto.dkg.BodyResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dkg.BodyResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dkg.BodyResult}
 */
proto.dkg.BodyResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.deserializeBinaryFromReader);
      msg.setSigproofmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dkg.BodyResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dkg.BodyResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dkg.BodyResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dkg.BodyResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigproofmsg();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional zkproof.SchnorrProofMessage siGProofMsg = 1;
 * @return {?proto.zkproof.SchnorrProofMessage}
 */
proto.dkg.BodyResult.prototype.getSigproofmsg = function() {
  return /** @type{?proto.zkproof.SchnorrProofMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_zkproof_message_pb.SchnorrProofMessage, 1));
};


/** @param {?proto.zkproof.SchnorrProofMessage|undefined} value */
proto.dkg.BodyResult.prototype.setSigproofmsg = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dkg.BodyResult.prototype.clearSigproofmsg = function() {
  this.setSigproofmsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.BodyResult.prototype.hasSigproofmsg = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dkg.BodyOPRFRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dkg.BodyOPRFRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dkg.BodyOPRFRequest.displayName = 'proto.dkg.BodyOPRFRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dkg.BodyOPRFRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dkg.BodyOPRFRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dkg.BodyOPRFRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dkg.BodyOPRFRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: msg.getX_asB64(),
    request: (f = msg.getRequest()) && github_com_getamis_alice_crypto_oprf_message_pb.OprfRequestMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dkg.BodyOPRFRequest}
 */
proto.dkg.BodyOPRFRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dkg.BodyOPRFRequest;
  return proto.dkg.BodyOPRFRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dkg.BodyOPRFRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dkg.BodyOPRFRequest}
 */
proto.dkg.BodyOPRFRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setX(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_oprf_message_pb.OprfRequestMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_oprf_message_pb.OprfRequestMessage.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dkg.BodyOPRFRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dkg.BodyOPRFRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dkg.BodyOPRFRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dkg.BodyOPRFRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_oprf_message_pb.OprfRequestMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes x = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dkg.BodyOPRFRequest.prototype.getX = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes x = 1;
 * This is a type-conversion wrapper around `getX()`
 * @return {string}
 */
proto.dkg.BodyOPRFRequest.prototype.getX_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getX()));
};


/**
 * optional bytes x = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getX()`
 * @return {!Uint8Array}
 */
proto.dkg.BodyOPRFRequest.prototype.getX_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getX()));
};


/** @param {!(string|Uint8Array)} value */
proto.dkg.BodyOPRFRequest.prototype.setX = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional oprf.OprfRequestMessage request = 2;
 * @return {?proto.oprf.OprfRequestMessage}
 */
proto.dkg.BodyOPRFRequest.prototype.getRequest = function() {
  return /** @type{?proto.oprf.OprfRequestMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_oprf_message_pb.OprfRequestMessage, 2));
};


/** @param {?proto.oprf.OprfRequestMessage|undefined} value */
proto.dkg.BodyOPRFRequest.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.dkg.BodyOPRFRequest.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dkg.BodyOPRFRequest.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.dkg.Type = {
  PEER: 0,
  DECOMMIT: 1,
  VERIFY: 2,
  RESULT: 3,
  OPRFREQUEST: 4,
  OPRFRESPONSE: 5
};

goog.object.extend(exports, proto.dkg);
