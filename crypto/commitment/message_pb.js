/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb = require('../../../../../github.com/getamis/alice/crypto/ecpointgrouplaw/point_pb.js');
goog.exportSymbol('proto.commitment.FeldmanVerifyMessage', null, global);
goog.exportSymbol('proto.commitment.HashCommitmentMessage', null, global);
goog.exportSymbol('proto.commitment.HashDecommitmentMessage', null, global);
goog.exportSymbol('proto.commitment.PedersenVerifyMessage', null, global);
goog.exportSymbol('proto.commitment.PointCommitmentMessage', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commitment.HashCommitmentMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commitment.HashCommitmentMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.commitment.HashCommitmentMessage.displayName = 'proto.commitment.HashCommitmentMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commitment.HashCommitmentMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.commitment.HashCommitmentMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commitment.HashCommitmentMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commitment.HashCommitmentMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    digest: msg.getDigest_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commitment.HashCommitmentMessage}
 */
proto.commitment.HashCommitmentMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commitment.HashCommitmentMessage;
  return proto.commitment.HashCommitmentMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commitment.HashCommitmentMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commitment.HashCommitmentMessage}
 */
proto.commitment.HashCommitmentMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDigest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commitment.HashCommitmentMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commitment.HashCommitmentMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commitment.HashCommitmentMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commitment.HashCommitmentMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes digest = 1;
 * @return {!(string|Uint8Array)}
 */
proto.commitment.HashCommitmentMessage.prototype.getDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes digest = 1;
 * This is a type-conversion wrapper around `getDigest()`
 * @return {string}
 */
proto.commitment.HashCommitmentMessage.prototype.getDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDigest()));
};


/**
 * optional bytes digest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDigest()`
 * @return {!Uint8Array}
 */
proto.commitment.HashCommitmentMessage.prototype.getDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDigest()));
};


/** @param {!(string|Uint8Array)} value */
proto.commitment.HashCommitmentMessage.prototype.setDigest = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commitment.HashDecommitmentMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commitment.HashDecommitmentMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.commitment.HashDecommitmentMessage.displayName = 'proto.commitment.HashDecommitmentMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commitment.HashDecommitmentMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.commitment.HashDecommitmentMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commitment.HashDecommitmentMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commitment.HashDecommitmentMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    salt: msg.getSalt_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commitment.HashDecommitmentMessage}
 */
proto.commitment.HashDecommitmentMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commitment.HashDecommitmentMessage;
  return proto.commitment.HashDecommitmentMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commitment.HashDecommitmentMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commitment.HashDecommitmentMessage}
 */
proto.commitment.HashDecommitmentMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSalt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commitment.HashDecommitmentMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commitment.HashDecommitmentMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commitment.HashDecommitmentMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commitment.HashDecommitmentMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.commitment.HashDecommitmentMessage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.commitment.HashDecommitmentMessage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.commitment.HashDecommitmentMessage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.commitment.HashDecommitmentMessage.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes salt = 2;
 * @return {!(string|Uint8Array)}
 */
proto.commitment.HashDecommitmentMessage.prototype.getSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes salt = 2;
 * This is a type-conversion wrapper around `getSalt()`
 * @return {string}
 */
proto.commitment.HashDecommitmentMessage.prototype.getSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSalt()));
};


/**
 * optional bytes salt = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSalt()`
 * @return {!Uint8Array}
 */
proto.commitment.HashDecommitmentMessage.prototype.getSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSalt()));
};


/** @param {!(string|Uint8Array)} value */
proto.commitment.HashDecommitmentMessage.prototype.setSalt = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commitment.PointCommitmentMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.commitment.PointCommitmentMessage.repeatedFields_, null);
};
goog.inherits(proto.commitment.PointCommitmentMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.commitment.PointCommitmentMessage.displayName = 'proto.commitment.PointCommitmentMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.commitment.PointCommitmentMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commitment.PointCommitmentMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.commitment.PointCommitmentMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commitment.PointCommitmentMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commitment.PointCommitmentMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commitment.PointCommitmentMessage}
 */
proto.commitment.PointCommitmentMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commitment.PointCommitmentMessage;
  return proto.commitment.PointCommitmentMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commitment.PointCommitmentMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commitment.PointCommitmentMessage}
 */
proto.commitment.PointCommitmentMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commitment.PointCommitmentMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commitment.PointCommitmentMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commitment.PointCommitmentMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commitment.PointCommitmentMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ecpointgrouplaw.EcPointMessage points = 1;
 * @return {!Array<!proto.ecpointgrouplaw.EcPointMessage>}
 */
proto.commitment.PointCommitmentMessage.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.ecpointgrouplaw.EcPointMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage, 1));
};


/** @param {!Array<!proto.ecpointgrouplaw.EcPointMessage>} value */
proto.commitment.PointCommitmentMessage.prototype.setPointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ecpointgrouplaw.EcPointMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ecpointgrouplaw.EcPointMessage}
 */
proto.commitment.PointCommitmentMessage.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ecpointgrouplaw.EcPointMessage, opt_index);
};


proto.commitment.PointCommitmentMessage.prototype.clearPointsList = function() {
  this.setPointsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commitment.FeldmanVerifyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commitment.FeldmanVerifyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.commitment.FeldmanVerifyMessage.displayName = 'proto.commitment.FeldmanVerifyMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commitment.FeldmanVerifyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.commitment.FeldmanVerifyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commitment.FeldmanVerifyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commitment.FeldmanVerifyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    evaluation: msg.getEvaluation_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commitment.FeldmanVerifyMessage}
 */
proto.commitment.FeldmanVerifyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commitment.FeldmanVerifyMessage;
  return proto.commitment.FeldmanVerifyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commitment.FeldmanVerifyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commitment.FeldmanVerifyMessage}
 */
proto.commitment.FeldmanVerifyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvaluation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commitment.FeldmanVerifyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commitment.FeldmanVerifyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commitment.FeldmanVerifyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commitment.FeldmanVerifyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvaluation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes evaluation = 1;
 * @return {!(string|Uint8Array)}
 */
proto.commitment.FeldmanVerifyMessage.prototype.getEvaluation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes evaluation = 1;
 * This is a type-conversion wrapper around `getEvaluation()`
 * @return {string}
 */
proto.commitment.FeldmanVerifyMessage.prototype.getEvaluation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvaluation()));
};


/**
 * optional bytes evaluation = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvaluation()`
 * @return {!Uint8Array}
 */
proto.commitment.FeldmanVerifyMessage.prototype.getEvaluation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvaluation()));
};


/** @param {!(string|Uint8Array)} value */
proto.commitment.FeldmanVerifyMessage.prototype.setEvaluation = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commitment.PedersenVerifyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commitment.PedersenVerifyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.commitment.PedersenVerifyMessage.displayName = 'proto.commitment.PedersenVerifyMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commitment.PedersenVerifyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.commitment.PedersenVerifyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commitment.PedersenVerifyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commitment.PedersenVerifyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    evaluation: msg.getEvaluation_asB64(),
    salt: msg.getSalt_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commitment.PedersenVerifyMessage}
 */
proto.commitment.PedersenVerifyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commitment.PedersenVerifyMessage;
  return proto.commitment.PedersenVerifyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commitment.PedersenVerifyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commitment.PedersenVerifyMessage}
 */
proto.commitment.PedersenVerifyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvaluation(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSalt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commitment.PedersenVerifyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commitment.PedersenVerifyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commitment.PedersenVerifyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commitment.PedersenVerifyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvaluation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes evaluation = 1;
 * @return {!(string|Uint8Array)}
 */
proto.commitment.PedersenVerifyMessage.prototype.getEvaluation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes evaluation = 1;
 * This is a type-conversion wrapper around `getEvaluation()`
 * @return {string}
 */
proto.commitment.PedersenVerifyMessage.prototype.getEvaluation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvaluation()));
};


/**
 * optional bytes evaluation = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvaluation()`
 * @return {!Uint8Array}
 */
proto.commitment.PedersenVerifyMessage.prototype.getEvaluation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvaluation()));
};


/** @param {!(string|Uint8Array)} value */
proto.commitment.PedersenVerifyMessage.prototype.setEvaluation = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes salt = 2;
 * @return {!(string|Uint8Array)}
 */
proto.commitment.PedersenVerifyMessage.prototype.getSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes salt = 2;
 * This is a type-conversion wrapper around `getSalt()`
 * @return {string}
 */
proto.commitment.PedersenVerifyMessage.prototype.getSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSalt()));
};


/**
 * optional bytes salt = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSalt()`
 * @return {!Uint8Array}
 */
proto.commitment.PedersenVerifyMessage.prototype.getSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSalt()));
};


/** @param {!(string|Uint8Array)} value */
proto.commitment.PedersenVerifyMessage.prototype.setSalt = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


goog.object.extend(exports, proto.commitment);
