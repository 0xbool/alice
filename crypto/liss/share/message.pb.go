// Copyright Â© 2021 AMIS Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: github.com/getamis/alice/crypto/liss/share/message.proto

package share

import (
	binaryquadraticform "github.com/getamis/alice/crypto/binaryquadraticform"
	cl "github.com/getamis/alice/crypto/homo/cl"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_BqCommitment   Type = 0
	Type_BqDecommitment Type = 1
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "BqCommitment",
		1: "BqDecommitment",
	}
	Type_value = map[string]int32{
		"BqCommitment":   0,
		"BqDecommitment": 1,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_getamis_alice_crypto_liss_share_message_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_github_com_getamis_alice_crypto_liss_share_message_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDescGZIP(), []int{0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Type   `protobuf:"varint,1,opt,name=type,proto3,enum=share.Type" json:"type,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Body:
	//	*Message_BqCommitment
	//	*Message_BqDedemmitment
	Body isMessage_Body `protobuf_oneof:"body"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_BqCommitment
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Message) GetBody() isMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Message) GetBqCommitment() *BodyBqCommitment {
	if x, ok := x.GetBody().(*Message_BqCommitment); ok {
		return x.BqCommitment
	}
	return nil
}

func (x *Message) GetBqDedemmitment() *BodyBqDecommitment {
	if x, ok := x.GetBody().(*Message_BqDedemmitment); ok {
		return x.BqDedemmitment
	}
	return nil
}

type isMessage_Body interface {
	isMessage_Body()
}

type Message_BqCommitment struct {
	BqCommitment *BodyBqCommitment `protobuf:"bytes,3,opt,name=bqCommitment,proto3,oneof"`
}

type Message_BqDedemmitment struct {
	BqDedemmitment *BodyBqDecommitment `protobuf:"bytes,4,opt,name=bqDedemmitment,proto3,oneof"`
}

func (*Message_BqCommitment) isMessage_Body() {}

func (*Message_BqDedemmitment) isMessage_Body() {}

type BodyBqCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClBase      *cl.ClBaseParameterMessage `protobuf:"bytes,1,opt,name=clBase,proto3" json:"clBase,omitempty"`
	Commitments [][]byte                   `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"`
}

func (x *BodyBqCommitment) Reset() {
	*x = BodyBqCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyBqCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyBqCommitment) ProtoMessage() {}

func (x *BodyBqCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyBqCommitment.ProtoReflect.Descriptor instead.
func (*BodyBqCommitment) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDescGZIP(), []int{1}
}

func (x *BodyBqCommitment) GetClBase() *cl.ClBaseParameterMessage {
	if x != nil {
		return x.ClBase
	}
	return nil
}

func (x *BodyBqCommitment) GetCommitments() [][]byte {
	if x != nil {
		return x.Commitments
	}
	return nil
}

type BodyBqDecommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpM          []*binaryquadraticform.BQForm `protobuf:"bytes,1,rep,name=expM,proto3" json:"expM,omitempty"`
	Decommitments []*BqDecommit                 `protobuf:"bytes,2,rep,name=decommitments,proto3" json:"decommitments,omitempty"`
}

func (x *BodyBqDecommitment) Reset() {
	*x = BodyBqDecommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyBqDecommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyBqDecommitment) ProtoMessage() {}

func (x *BodyBqDecommitment) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyBqDecommitment.ProtoReflect.Descriptor instead.
func (*BodyBqDecommitment) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDescGZIP(), []int{2}
}

func (x *BodyBqDecommitment) GetExpM() []*binaryquadraticform.BQForm {
	if x != nil {
		return x.ExpM
	}
	return nil
}

func (x *BodyBqDecommitment) GetDecommitments() []*BqDecommit {
	if x != nil {
		return x.Decommitments
	}
	return nil
}

type BqDecommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt   []byte                      `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	Bqform *binaryquadraticform.BQForm `protobuf:"bytes,2,opt,name=bqform,proto3" json:"bqform,omitempty"`
}

func (x *BqDecommit) Reset() {
	*x = BqDecommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BqDecommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BqDecommit) ProtoMessage() {}

func (x *BqDecommit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BqDecommit.ProtoReflect.Descriptor instead.
func (*BqDecommit) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDescGZIP(), []int{3}
}

func (x *BqDecommit) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *BqDecommit) GetBqform() *binaryquadraticform.BQForm {
	if x != nil {
		return x.Bqform
	}
	return nil
}

var File_github_com_getamis_alice_crypto_liss_share_message_proto protoreflect.FileDescriptor

var file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x6c, 0x69, 0x73, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65,
	0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74,
	0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x68, 0x6f, 0x6d, 0x6f, 0x2f, 0x63, 0x6c, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x01, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x71, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x71, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x71, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x62, 0x71, 0x44, 0x65, 0x64,
	0x65, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x71, 0x44, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x71,
	0x44, 0x65, 0x64, 0x65, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0x68, 0x0a, 0x10, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x71, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6c, 0x42, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x2e, 0x43, 0x6c,
	0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7e,
	0x0a, 0x12, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x71, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x4d, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72,
	0x61, 0x74, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52,
	0x04, 0x65, 0x78, 0x70, 0x4d, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2e, 0x62, 0x71, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x0d, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x55,
	0x0a, 0x0a, 0x62, 0x71, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x12, 0x33, 0x0a, 0x06, 0x62, 0x71, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74,
	0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42, 0x51, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x06, 0x62,
	0x71, 0x66, 0x6f, 0x72, 0x6d, 0x2a, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x42, 0x71, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x71, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x73, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDescOnce sync.Once
	file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDescData = file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDesc
)

func file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDescGZIP() []byte {
	file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDescOnce.Do(func() {
		file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDescData)
	})
	return file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDescData
}

var file_github_com_getamis_alice_crypto_liss_share_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_getamis_alice_crypto_liss_share_message_proto_goTypes = []interface{}{
	(Type)(0),                          // 0: share.Type
	(*Message)(nil),                    // 1: share.Message
	(*BodyBqCommitment)(nil),           // 2: share.BodyBqCommitment
	(*BodyBqDecommitment)(nil),         // 3: share.BodyBqDecommitment
	(*BqDecommit)(nil),                 // 4: share.bqDecommit
	(*cl.ClBaseParameterMessage)(nil),  // 5: cl.ClBaseParameterMessage
	(*binaryquadraticform.BQForm)(nil), // 6: binaryquadraticform.BQForm
}
var file_github_com_getamis_alice_crypto_liss_share_message_proto_depIdxs = []int32{
	0, // 0: share.Message.type:type_name -> share.Type
	2, // 1: share.Message.bqCommitment:type_name -> share.BodyBqCommitment
	3, // 2: share.Message.bqDedemmitment:type_name -> share.BodyBqDecommitment
	5, // 3: share.BodyBqCommitment.clBase:type_name -> cl.ClBaseParameterMessage
	6, // 4: share.BodyBqDecommitment.expM:type_name -> binaryquadraticform.BQForm
	4, // 5: share.BodyBqDecommitment.decommitments:type_name -> share.bqDecommit
	6, // 6: share.bqDecommit.bqform:type_name -> binaryquadraticform.BQForm
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_github_com_getamis_alice_crypto_liss_share_message_proto_init() }
func file_github_com_getamis_alice_crypto_liss_share_message_proto_init() {
	if File_github_com_getamis_alice_crypto_liss_share_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyBqCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyBqDecommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BqDecommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Message_BqCommitment)(nil),
		(*Message_BqDedemmitment)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_getamis_alice_crypto_liss_share_message_proto_goTypes,
		DependencyIndexes: file_github_com_getamis_alice_crypto_liss_share_message_proto_depIdxs,
		EnumInfos:         file_github_com_getamis_alice_crypto_liss_share_message_proto_enumTypes,
		MessageInfos:      file_github_com_getamis_alice_crypto_liss_share_message_proto_msgTypes,
	}.Build()
	File_github_com_getamis_alice_crypto_liss_share_message_proto = out.File
	file_github_com_getamis_alice_crypto_liss_share_message_proto_rawDesc = nil
	file_github_com_getamis_alice_crypto_liss_share_message_proto_goTypes = nil
	file_github_com_getamis_alice_crypto_liss_share_message_proto_depIdxs = nil
}
