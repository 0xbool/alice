/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb = require('../../../../../github.com/getamis/alice/crypto/ecpointgrouplaw/point_pb.js');
goog.exportSymbol('proto.zkproof.IntegerFactorizationProofMessage', null, global);
goog.exportSymbol('proto.zkproof.SchnorrProofMessage', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zkproof.IntegerFactorizationProofMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zkproof.IntegerFactorizationProofMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zkproof.IntegerFactorizationProofMessage.displayName = 'proto.zkproof.IntegerFactorizationProofMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.zkproof.IntegerFactorizationProofMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zkproof.IntegerFactorizationProofMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkproof.IntegerFactorizationProofMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    salt: msg.getSalt_asB64(),
    publickey: msg.getPublickey_asB64(),
    x: msg.getX_asB64(),
    y: msg.getY_asB64(),
    z: msg.getZ_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zkproof.IntegerFactorizationProofMessage}
 */
proto.zkproof.IntegerFactorizationProofMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zkproof.IntegerFactorizationProofMessage;
  return proto.zkproof.IntegerFactorizationProofMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zkproof.IntegerFactorizationProofMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zkproof.IntegerFactorizationProofMessage}
 */
proto.zkproof.IntegerFactorizationProofMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSalt(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zkproof.IntegerFactorizationProofMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zkproof.IntegerFactorizationProofMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkproof.IntegerFactorizationProofMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getX_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getY_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getZ_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes salt = 1;
 * @return {!(string|Uint8Array)}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes salt = 1;
 * This is a type-conversion wrapper around `getSalt()`
 * @return {string}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSalt()));
};


/**
 * optional bytes salt = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSalt()`
 * @return {!Uint8Array}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSalt()));
};


/** @param {!(string|Uint8Array)} value */
proto.zkproof.IntegerFactorizationProofMessage.prototype.setSalt = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes publicKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getPublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes publicKey = 2;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes publicKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.zkproof.IntegerFactorizationProofMessage.prototype.setPublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes x = 3;
 * @return {!(string|Uint8Array)}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getX = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes x = 3;
 * This is a type-conversion wrapper around `getX()`
 * @return {string}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getX_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getX()));
};


/**
 * optional bytes x = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getX()`
 * @return {!Uint8Array}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getX_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getX()));
};


/** @param {!(string|Uint8Array)} value */
proto.zkproof.IntegerFactorizationProofMessage.prototype.setX = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes y = 4;
 * @return {!(string|Uint8Array)}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getY = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes y = 4;
 * This is a type-conversion wrapper around `getY()`
 * @return {string}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getY_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getY()));
};


/**
 * optional bytes y = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getY()`
 * @return {!Uint8Array}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getY_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getY()));
};


/** @param {!(string|Uint8Array)} value */
proto.zkproof.IntegerFactorizationProofMessage.prototype.setY = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes z = 5;
 * @return {!(string|Uint8Array)}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getZ = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes z = 5;
 * This is a type-conversion wrapper around `getZ()`
 * @return {string}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getZ_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getZ()));
};


/**
 * optional bytes z = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getZ()`
 * @return {!Uint8Array}
 */
proto.zkproof.IntegerFactorizationProofMessage.prototype.getZ_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getZ()));
};


/** @param {!(string|Uint8Array)} value */
proto.zkproof.IntegerFactorizationProofMessage.prototype.setZ = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zkproof.SchnorrProofMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zkproof.SchnorrProofMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.zkproof.SchnorrProofMessage.displayName = 'proto.zkproof.SchnorrProofMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zkproof.SchnorrProofMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.zkproof.SchnorrProofMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zkproof.SchnorrProofMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkproof.SchnorrProofMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    salt: msg.getSalt_asB64(),
    v: (f = msg.getV()) && github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.toObject(includeInstance, f),
    alpha: (f = msg.getAlpha()) && github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.toObject(includeInstance, f),
    u: msg.getU_asB64(),
    t: msg.getT_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zkproof.SchnorrProofMessage}
 */
proto.zkproof.SchnorrProofMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zkproof.SchnorrProofMessage;
  return proto.zkproof.SchnorrProofMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zkproof.SchnorrProofMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zkproof.SchnorrProofMessage}
 */
proto.zkproof.SchnorrProofMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSalt(value);
      break;
    case 2:
      var value = new github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.deserializeBinaryFromReader);
      msg.setV(value);
      break;
    case 3:
      var value = new github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage;
      reader.readMessage(value,github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.deserializeBinaryFromReader);
      msg.setAlpha(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setU(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setT(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zkproof.SchnorrProofMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zkproof.SchnorrProofMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zkproof.SchnorrProofMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zkproof.SchnorrProofMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getV();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.serializeBinaryToWriter
    );
  }
  f = message.getAlpha();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage.serializeBinaryToWriter
    );
  }
  f = message.getU_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getT_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes salt = 1;
 * @return {!(string|Uint8Array)}
 */
proto.zkproof.SchnorrProofMessage.prototype.getSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes salt = 1;
 * This is a type-conversion wrapper around `getSalt()`
 * @return {string}
 */
proto.zkproof.SchnorrProofMessage.prototype.getSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSalt()));
};


/**
 * optional bytes salt = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSalt()`
 * @return {!Uint8Array}
 */
proto.zkproof.SchnorrProofMessage.prototype.getSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSalt()));
};


/** @param {!(string|Uint8Array)} value */
proto.zkproof.SchnorrProofMessage.prototype.setSalt = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ecpointgrouplaw.EcPointMessage V = 2;
 * @return {?proto.ecpointgrouplaw.EcPointMessage}
 */
proto.zkproof.SchnorrProofMessage.prototype.getV = function() {
  return /** @type{?proto.ecpointgrouplaw.EcPointMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage, 2));
};


/** @param {?proto.ecpointgrouplaw.EcPointMessage|undefined} value */
proto.zkproof.SchnorrProofMessage.prototype.setV = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.zkproof.SchnorrProofMessage.prototype.clearV = function() {
  this.setV(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zkproof.SchnorrProofMessage.prototype.hasV = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ecpointgrouplaw.EcPointMessage alpha = 3;
 * @return {?proto.ecpointgrouplaw.EcPointMessage}
 */
proto.zkproof.SchnorrProofMessage.prototype.getAlpha = function() {
  return /** @type{?proto.ecpointgrouplaw.EcPointMessage} */ (
    jspb.Message.getWrapperField(this, github_com_getamis_alice_crypto_ecpointgrouplaw_point_pb.EcPointMessage, 3));
};


/** @param {?proto.ecpointgrouplaw.EcPointMessage|undefined} value */
proto.zkproof.SchnorrProofMessage.prototype.setAlpha = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.zkproof.SchnorrProofMessage.prototype.clearAlpha = function() {
  this.setAlpha(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.zkproof.SchnorrProofMessage.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes u = 4;
 * @return {!(string|Uint8Array)}
 */
proto.zkproof.SchnorrProofMessage.prototype.getU = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes u = 4;
 * This is a type-conversion wrapper around `getU()`
 * @return {string}
 */
proto.zkproof.SchnorrProofMessage.prototype.getU_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getU()));
};


/**
 * optional bytes u = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getU()`
 * @return {!Uint8Array}
 */
proto.zkproof.SchnorrProofMessage.prototype.getU_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getU()));
};


/** @param {!(string|Uint8Array)} value */
proto.zkproof.SchnorrProofMessage.prototype.setU = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes t = 5;
 * @return {!(string|Uint8Array)}
 */
proto.zkproof.SchnorrProofMessage.prototype.getT = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes t = 5;
 * This is a type-conversion wrapper around `getT()`
 * @return {string}
 */
proto.zkproof.SchnorrProofMessage.prototype.getT_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getT()));
};


/**
 * optional bytes t = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getT()`
 * @return {!Uint8Array}
 */
proto.zkproof.SchnorrProofMessage.prototype.getT_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getT()));
};


/** @param {!(string|Uint8Array)} value */
proto.zkproof.SchnorrProofMessage.prototype.setT = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


goog.object.extend(exports, proto.zkproof);
