// Copyright Â© 2020 AMIS Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: github.com/getamis/alice/crypto/zkproof/message.proto

package zkproof

import (
	ecpointgrouplaw "github.com/getamis/alice/crypto/ecpointgrouplaw"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IntegerFactorizationProofMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt      []byte `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	PublicKey []byte `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	X         []byte `protobuf:"bytes,3,opt,name=x,proto3" json:"x,omitempty"`
	Y         []byte `protobuf:"bytes,4,opt,name=y,proto3" json:"y,omitempty"`
	Z         []byte `protobuf:"bytes,5,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *IntegerFactorizationProofMessage) Reset() {
	*x = IntegerFactorizationProofMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerFactorizationProofMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerFactorizationProofMessage) ProtoMessage() {}

func (x *IntegerFactorizationProofMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerFactorizationProofMessage.ProtoReflect.Descriptor instead.
func (*IntegerFactorizationProofMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescGZIP(), []int{0}
}

func (x *IntegerFactorizationProofMessage) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *IntegerFactorizationProofMessage) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *IntegerFactorizationProofMessage) GetX() []byte {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *IntegerFactorizationProofMessage) GetY() []byte {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *IntegerFactorizationProofMessage) GetZ() []byte {
	if x != nil {
		return x.Z
	}
	return nil
}

type SchnorrProofMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt  []byte                          `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	V     *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,2,opt,name=V,proto3" json:"V,omitempty"`
	Alpha *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,3,opt,name=alpha,proto3" json:"alpha,omitempty"`
	U     []byte                          `protobuf:"bytes,4,opt,name=u,proto3" json:"u,omitempty"`
	T     []byte                          `protobuf:"bytes,5,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *SchnorrProofMessage) Reset() {
	*x = SchnorrProofMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchnorrProofMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchnorrProofMessage) ProtoMessage() {}

func (x *SchnorrProofMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchnorrProofMessage.ProtoReflect.Descriptor instead.
func (*SchnorrProofMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescGZIP(), []int{1}
}

func (x *SchnorrProofMessage) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *SchnorrProofMessage) GetV() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *SchnorrProofMessage) GetAlpha() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.Alpha
	}
	return nil
}

func (x *SchnorrProofMessage) GetU() []byte {
	if x != nil {
		return x.U
	}
	return nil
}

func (x *SchnorrProofMessage) GetT() []byte {
	if x != nil {
		return x.T
	}
	return nil
}

type ConsistencyTwoPointsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt []byte                          `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	U    []byte                          `protobuf:"bytes,2,opt,name=u,proto3" json:"u,omitempty"`
	T    []byte                          `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
	A    *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,4,opt,name=A,proto3" json:"A,omitempty"`
	B    *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,5,opt,name=B,proto3" json:"B,omitempty"`
}

func (x *ConsistencyTwoPointsMessage) Reset() {
	*x = ConsistencyTwoPointsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsistencyTwoPointsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsistencyTwoPointsMessage) ProtoMessage() {}

func (x *ConsistencyTwoPointsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsistencyTwoPointsMessage.ProtoReflect.Descriptor instead.
func (*ConsistencyTwoPointsMessage) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescGZIP(), []int{2}
}

func (x *ConsistencyTwoPointsMessage) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *ConsistencyTwoPointsMessage) GetU() []byte {
	if x != nil {
		return x.U
	}
	return nil
}

func (x *ConsistencyTwoPointsMessage) GetT() []byte {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *ConsistencyTwoPointsMessage) GetA() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *ConsistencyTwoPointsMessage) GetB() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.B
	}
	return nil
}

type InteractiveSchnorrProver1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,1,opt,name=H,proto3" json:"H,omitempty"`
	V *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,2,opt,name=V,proto3" json:"V,omitempty"`
}

func (x *InteractiveSchnorrProver1) Reset() {
	*x = InteractiveSchnorrProver1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractiveSchnorrProver1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractiveSchnorrProver1) ProtoMessage() {}

func (x *InteractiveSchnorrProver1) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractiveSchnorrProver1.ProtoReflect.Descriptor instead.
func (*InteractiveSchnorrProver1) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescGZIP(), []int{3}
}

func (x *InteractiveSchnorrProver1) GetH() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.H
	}
	return nil
}

func (x *InteractiveSchnorrProver1) GetV() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.V
	}
	return nil
}

type InteractiveSchnorrProver2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,1,opt,name=B,proto3" json:"B,omitempty"`
}

func (x *InteractiveSchnorrProver2) Reset() {
	*x = InteractiveSchnorrProver2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractiveSchnorrProver2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractiveSchnorrProver2) ProtoMessage() {}

func (x *InteractiveSchnorrProver2) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractiveSchnorrProver2.ProtoReflect.Descriptor instead.
func (*InteractiveSchnorrProver2) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescGZIP(), []int{4}
}

func (x *InteractiveSchnorrProver2) GetB() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.B
	}
	return nil
}

type InteractiveSchnorrProver3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Z []byte `protobuf:"bytes,1,opt,name=Z,proto3" json:"Z,omitempty"`
	K []byte `protobuf:"bytes,2,opt,name=K,proto3" json:"K,omitempty"`
}

func (x *InteractiveSchnorrProver3) Reset() {
	*x = InteractiveSchnorrProver3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractiveSchnorrProver3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractiveSchnorrProver3) ProtoMessage() {}

func (x *InteractiveSchnorrProver3) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractiveSchnorrProver3.ProtoReflect.Descriptor instead.
func (*InteractiveSchnorrProver3) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescGZIP(), []int{5}
}

func (x *InteractiveSchnorrProver3) GetZ() []byte {
	if x != nil {
		return x.Z
	}
	return nil
}

func (x *InteractiveSchnorrProver3) GetK() []byte {
	if x != nil {
		return x.K
	}
	return nil
}

type InteractiveSchnorrVerifier1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C *ecpointgrouplaw.EcPointMessage `protobuf:"bytes,1,opt,name=C,proto3" json:"C,omitempty"`
}

func (x *InteractiveSchnorrVerifier1) Reset() {
	*x = InteractiveSchnorrVerifier1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractiveSchnorrVerifier1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractiveSchnorrVerifier1) ProtoMessage() {}

func (x *InteractiveSchnorrVerifier1) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractiveSchnorrVerifier1.ProtoReflect.Descriptor instead.
func (*InteractiveSchnorrVerifier1) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescGZIP(), []int{6}
}

func (x *InteractiveSchnorrVerifier1) GetC() *ecpointgrouplaw.EcPointMessage {
	if x != nil {
		return x.C
	}
	return nil
}

type InteractiveSchnorrVerifier2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	E []byte `protobuf:"bytes,1,opt,name=e,proto3" json:"e,omitempty"`
	R []byte `protobuf:"bytes,2,opt,name=r,proto3" json:"r,omitempty"`
}

func (x *InteractiveSchnorrVerifier2) Reset() {
	*x = InteractiveSchnorrVerifier2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractiveSchnorrVerifier2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractiveSchnorrVerifier2) ProtoMessage() {}

func (x *InteractiveSchnorrVerifier2) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractiveSchnorrVerifier2.ProtoReflect.Descriptor instead.
func (*InteractiveSchnorrVerifier2) Descriptor() ([]byte, []int) {
	return file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescGZIP(), []int{7}
}

func (x *InteractiveSchnorrVerifier2) GetE() []byte {
	if x != nil {
		return x.E
	}
	return nil
}

func (x *InteractiveSchnorrVerifier2) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

var File_github_com_getamis_alice_crypto_zkproof_message_proto protoreflect.FileDescriptor

var file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDesc = []byte{
	0x0a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x1a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61,
	0x77, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a,
	0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x7a, 0x22, 0xab, 0x01,
	0x0a, 0x13, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x01, 0x56, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x56, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12,
	0x0c, 0x0a, 0x01, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x75, 0x12, 0x0c, 0x0a,
	0x01, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x1b,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x77, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12,
	0x0c, 0x0a, 0x01, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x75, 0x12, 0x0c, 0x0a,
	0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x74, 0x12, 0x2d, 0x0a, 0x01, 0x41,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x41, 0x12, 0x2d, 0x0a, 0x01, 0x42, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x42, 0x22, 0x79, 0x0a, 0x19, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x50,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x31, 0x12, 0x2d, 0x0a, 0x01, 0x48, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x01, 0x48, 0x12, 0x2d, 0x0a, 0x01, 0x56, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c,
	0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x01, 0x56, 0x22, 0x4a, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x32, 0x12, 0x2d, 0x0a, 0x01, 0x42, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65,
	0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45,
	0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x42,
	0x22, 0x37, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x33, 0x12, 0x0c, 0x0a,
	0x01, 0x5a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x5a, 0x12, 0x0c, 0x0a, 0x01, 0x4b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x4b, 0x22, 0x4c, 0x0a, 0x1b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x31, 0x12, 0x2d, 0x0a, 0x01, 0x43, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x63, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x6c, 0x61, 0x77, 0x2e, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x43, 0x22, 0x39, 0x0a, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x32, 0x12, 0x0c, 0x0a, 0x01, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x01, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x01, 0x72, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x65, 0x74, 0x61, 0x6d, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescOnce sync.Once
	file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescData = file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDesc
)

func file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescGZIP() []byte {
	file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescOnce.Do(func() {
		file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescData)
	})
	return file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDescData
}

var file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_github_com_getamis_alice_crypto_zkproof_message_proto_goTypes = []interface{}{
	(*IntegerFactorizationProofMessage)(nil), // 0: zkproof.IntegerFactorizationProofMessage
	(*SchnorrProofMessage)(nil),              // 1: zkproof.SchnorrProofMessage
	(*ConsistencyTwoPointsMessage)(nil),      // 2: zkproof.ConsistencyTwoPointsMessage
	(*InteractiveSchnorrProver1)(nil),        // 3: zkproof.InteractiveSchnorrProver1
	(*InteractiveSchnorrProver2)(nil),        // 4: zkproof.InteractiveSchnorrProver2
	(*InteractiveSchnorrProver3)(nil),        // 5: zkproof.InteractiveSchnorrProver3
	(*InteractiveSchnorrVerifier1)(nil),      // 6: zkproof.InteractiveSchnorrVerifier1
	(*InteractiveSchnorrVerifier2)(nil),      // 7: zkproof.InteractiveSchnorrVerifier2
	(*ecpointgrouplaw.EcPointMessage)(nil),   // 8: ecpointgrouplaw.EcPointMessage
}
var file_github_com_getamis_alice_crypto_zkproof_message_proto_depIdxs = []int32{
	8, // 0: zkproof.SchnorrProofMessage.V:type_name -> ecpointgrouplaw.EcPointMessage
	8, // 1: zkproof.SchnorrProofMessage.alpha:type_name -> ecpointgrouplaw.EcPointMessage
	8, // 2: zkproof.ConsistencyTwoPointsMessage.A:type_name -> ecpointgrouplaw.EcPointMessage
	8, // 3: zkproof.ConsistencyTwoPointsMessage.B:type_name -> ecpointgrouplaw.EcPointMessage
	8, // 4: zkproof.InteractiveSchnorrProver1.H:type_name -> ecpointgrouplaw.EcPointMessage
	8, // 5: zkproof.InteractiveSchnorrProver1.V:type_name -> ecpointgrouplaw.EcPointMessage
	8, // 6: zkproof.InteractiveSchnorrProver2.B:type_name -> ecpointgrouplaw.EcPointMessage
	8, // 7: zkproof.InteractiveSchnorrVerifier1.C:type_name -> ecpointgrouplaw.EcPointMessage
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_github_com_getamis_alice_crypto_zkproof_message_proto_init() }
func file_github_com_getamis_alice_crypto_zkproof_message_proto_init() {
	if File_github_com_getamis_alice_crypto_zkproof_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerFactorizationProofMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchnorrProofMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsistencyTwoPointsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractiveSchnorrProver1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractiveSchnorrProver2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractiveSchnorrProver3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractiveSchnorrVerifier1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractiveSchnorrVerifier2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_getamis_alice_crypto_zkproof_message_proto_goTypes,
		DependencyIndexes: file_github_com_getamis_alice_crypto_zkproof_message_proto_depIdxs,
		MessageInfos:      file_github_com_getamis_alice_crypto_zkproof_message_proto_msgTypes,
	}.Build()
	File_github_com_getamis_alice_crypto_zkproof_message_proto = out.File
	file_github_com_getamis_alice_crypto_zkproof_message_proto_rawDesc = nil
	file_github_com_getamis_alice_crypto_zkproof_message_proto_goTypes = nil
	file_github_com_getamis_alice_crypto_zkproof_message_proto_depIdxs = nil
}
